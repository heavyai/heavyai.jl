#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

# Client callable method for connect
function connect(c::MapDClient, user::String, passwd::String, dbname::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "connect", Thrift.MessageType.CALL, c.seqid)
  inp = connect_args()
  Thrift.set_field!(inp, :user, user)
  Thrift.set_field!(inp, :passwd, passwd)
  Thrift.set_field!(inp, :dbname, dbname)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, connect_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function connect

# Client callable method for disconnect
function disconnect(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "disconnect", Thrift.MessageType.CALL, c.seqid)
  inp = disconnect_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, disconnect_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function disconnect

# Client callable method for get_server_status
function get_server_status(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_server_status", Thrift.MessageType.CALL, c.seqid)
  inp = get_server_status_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_server_status_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_server_status

# Client callable method for get_status
function get_status(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_status", Thrift.MessageType.CALL, c.seqid)
  inp = get_status_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_status_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_status

# Client callable method for get_hardware_info
function get_hardware_info(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_hardware_info", Thrift.MessageType.CALL, c.seqid)
  inp = get_hardware_info_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_hardware_info_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_hardware_info

# Client callable method for get_tables
function get_tables(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_tables", Thrift.MessageType.CALL, c.seqid)
  inp = get_tables_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_tables_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_tables

# Client callable method for get_physical_tables
function get_physical_tables(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_physical_tables", Thrift.MessageType.CALL, c.seqid)
  inp = get_physical_tables_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_physical_tables_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_physical_tables

# Client callable method for get_views
function get_views(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_views", Thrift.MessageType.CALL, c.seqid)
  inp = get_views_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_views_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_views

# Client callable method for get_tables_meta
function get_tables_meta(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_tables_meta", Thrift.MessageType.CALL, c.seqid)
  inp = get_tables_meta_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_tables_meta_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_tables_meta

# Client callable method for get_table_details
function get_table_details(c::MapDClient, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_details", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_details_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_details_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_details

# Client callable method for get_internal_table_details
function get_internal_table_details(c::MapDClient, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_internal_table_details", Thrift.MessageType.CALL, c.seqid)
  inp = get_internal_table_details_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_internal_table_details_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_internal_table_details

# Client callable method for get_users
function get_users(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_users", Thrift.MessageType.CALL, c.seqid)
  inp = get_users_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_users_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_users

# Client callable method for get_databases
function get_databases(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_databases", Thrift.MessageType.CALL, c.seqid)
  inp = get_databases_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_databases_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_databases

# # Client callable method for get_version
# function get_version(c::MapDClient)
#   p = c.p
#   c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
#   Thrift.writeMessageBegin(p, "get_version", Thrift.MessageType.CALL, c.seqid)
#   inp = get_version_args()
#   Thrift.write(p, inp)
#   Thrift.writeMessageEnd(p)
#   Thrift.flush(p.t)
#
#   (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
#   (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
#   outp = Thrift.read(p, get_version_result())
#   Thrift.readMessageEnd(p)
#   (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
#   Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
#   Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
#   throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
# end # function get_version

# Client callable method for start_heap_profile
function start_heap_profile(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "start_heap_profile", Thrift.MessageType.CALL, c.seqid)
  inp = start_heap_profile_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, start_heap_profile_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function start_heap_profile

# Client callable method for stop_heap_profile
function stop_heap_profile(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "stop_heap_profile", Thrift.MessageType.CALL, c.seqid)
  inp = stop_heap_profile_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, stop_heap_profile_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function stop_heap_profile

# Client callable method for get_heap_profile
function get_heap_profile(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_heap_profile", Thrift.MessageType.CALL, c.seqid)
  inp = get_heap_profile_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_heap_profile_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_heap_profile

# Client callable method for get_memory
function get_memory(c::MapDClient, session::TSessionId, memory_level::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_memory", Thrift.MessageType.CALL, c.seqid)
  inp = get_memory_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :memory_level, memory_level)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_memory_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_memory

# Client callable method for clear_cpu_memory
function clear_cpu_memory(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "clear_cpu_memory", Thrift.MessageType.CALL, c.seqid)
  inp = clear_cpu_memory_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, clear_cpu_memory_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function clear_cpu_memory

# Client callable method for clear_gpu_memory
function clear_gpu_memory(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "clear_gpu_memory", Thrift.MessageType.CALL, c.seqid)
  inp = clear_gpu_memory_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, clear_gpu_memory_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function clear_gpu_memory

# Client callable method for set_table_epoch
function set_table_epoch(c::MapDClient, session::TSessionId, db_id::Int32, table_id::Int32, new_epoch::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_table_epoch", Thrift.MessageType.CALL, c.seqid)
  inp = set_table_epoch_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :db_id, db_id)
  Thrift.set_field!(inp, :table_id, table_id)
  Thrift.set_field!(inp, :new_epoch, new_epoch)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_table_epoch_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function set_table_epoch

# Client callable method for set_table_epoch_by_name
function set_table_epoch_by_name(c::MapDClient, session::TSessionId, table_name::String, new_epoch::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_table_epoch_by_name", Thrift.MessageType.CALL, c.seqid)
  inp = set_table_epoch_by_name_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :new_epoch, new_epoch)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_table_epoch_by_name_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function set_table_epoch_by_name

# Client callable method for get_table_epoch
function get_table_epoch(c::MapDClient, session::TSessionId, db_id::Int32, table_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_epoch", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_epoch_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :db_id, db_id)
  Thrift.set_field!(inp, :table_id, table_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_epoch_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_epoch

# Client callable method for get_table_epoch_by_name
function get_table_epoch_by_name(c::MapDClient, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_epoch_by_name", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_epoch_by_name_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_epoch_by_name_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_epoch_by_name

# Client callable method for sql_execute
function sql_execute(c::MapDClient, session::TSessionId, query::String, column_format::Bool, nonce::String, first_n::Int32, at_most_n::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "sql_execute", Thrift.MessageType.CALL, c.seqid)
  inp = sql_execute_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query, query)
  Thrift.set_field!(inp, :column_format, column_format)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.set_field!(inp, :first_n, first_n)
  Thrift.set_field!(inp, :at_most_n, at_most_n)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, sql_execute_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function sql_execute

# Client callable method for sql_execute_df
function sql_execute_df(c::MapDClient, session::TSessionId, query::String, device_type::Int32, device_id::Int32, first_n::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "sql_execute_df", Thrift.MessageType.CALL, c.seqid)
  inp = sql_execute_df_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query, query)
  Thrift.set_field!(inp, :device_type, device_type)
  Thrift.set_field!(inp, :device_id, device_id)
  Thrift.set_field!(inp, :first_n, first_n)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, sql_execute_df_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function sql_execute_df

# Client callable method for sql_execute_gdf
function sql_execute_gdf(c::MapDClient, session::TSessionId, query::String, device_id::Int32, first_n::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "sql_execute_gdf", Thrift.MessageType.CALL, c.seqid)
  inp = sql_execute_gdf_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query, query)
  Thrift.set_field!(inp, :device_id, device_id)
  Thrift.set_field!(inp, :first_n, first_n)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, sql_execute_gdf_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function sql_execute_gdf

# Client callable method for deallocate_df
function deallocate_df(c::MapDClient, session::TSessionId, df::TDataFrame, device_type::Int32, device_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "deallocate_df", Thrift.MessageType.CALL, c.seqid)
  inp = deallocate_df_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :df, df)
  Thrift.set_field!(inp, :device_type, device_type)
  Thrift.set_field!(inp, :device_id, device_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, deallocate_df_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function deallocate_df

# Client callable method for interrupt
function interrupt(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "interrupt", Thrift.MessageType.CALL, c.seqid)
  inp = interrupt_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, interrupt_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function interrupt

# # Client callable method for sql_validate
# function sql_validate(c::MapDClient, session::TSessionId, query::String)
#   p = c.p
#   c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
#   Thrift.writeMessageBegin(p, "sql_validate", Thrift.MessageType.CALL, c.seqid)
#   inp = sql_validate_args()
#   Thrift.set_field!(inp, :session, session)
#   Thrift.set_field!(inp, :query, query)
#   Thrift.write(p, inp)
#   Thrift.writeMessageEnd(p)
#   Thrift.flush(p.t)
#
#   (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
#   (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
#   outp = Thrift.read(p, sql_validate_result())
#   Thrift.readMessageEnd(p)
#   (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
#   Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
#   Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
#   throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
# end # function sql_validate

# Client callable method for get_completion_hints
function get_completion_hints(c::MapDClient, session::TSessionId, sql::String, cursor::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_completion_hints", Thrift.MessageType.CALL, c.seqid)
  inp = get_completion_hints_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :sql, sql)
  Thrift.set_field!(inp, :cursor, cursor)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_completion_hints_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_completion_hints

# Client callable method for set_execution_mode
function set_execution_mode(c::MapDClient, session::TSessionId, mode::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_execution_mode", Thrift.MessageType.CALL, c.seqid)
  inp = set_execution_mode_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :mode, mode)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_execution_mode_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function set_execution_mode

# Client callable method for render_vega
function render_vega(c::MapDClient, session::TSessionId, widget_id::Int64, vega_json::String, compression_level::Int32, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "render_vega", Thrift.MessageType.CALL, c.seqid)
  inp = render_vega_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :widget_id, widget_id)
  Thrift.set_field!(inp, :vega_json, vega_json)
  Thrift.set_field!(inp, :compression_level, compression_level)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, render_vega_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function render_vega

# Client callable method for get_result_row_for_pixel
function get_result_row_for_pixel(c::MapDClient, session::TSessionId, widget_id::Int64, pixel::TPixel, table_col_names::Dict{String,Vector{String}}, column_format::Bool, pixelRadius::Int32, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_result_row_for_pixel", Thrift.MessageType.CALL, c.seqid)
  inp = get_result_row_for_pixel_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :widget_id, widget_id)
  Thrift.set_field!(inp, :pixel, pixel)
  Thrift.set_field!(inp, :table_col_names, table_col_names)
  Thrift.set_field!(inp, :column_format, column_format)
  Thrift.set_field!(inp, :pixelRadius, pixelRadius)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_result_row_for_pixel_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_result_row_for_pixel

# Client callable method for get_frontend_view
function get_frontend_view(c::MapDClient, session::TSessionId, view_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_frontend_view", Thrift.MessageType.CALL, c.seqid)
  inp = get_frontend_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_name, view_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_frontend_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_frontend_view

# Client callable method for get_frontend_views
function get_frontend_views(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_frontend_views", Thrift.MessageType.CALL, c.seqid)
  inp = get_frontend_views_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_frontend_views_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_frontend_views

# Client callable method for create_frontend_view
function create_frontend_view(c::MapDClient, session::TSessionId, view_name::String, view_state::String, image_hash::String, view_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_frontend_view", Thrift.MessageType.CALL, c.seqid)
  inp = create_frontend_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_name, view_name)
  Thrift.set_field!(inp, :view_state, view_state)
  Thrift.set_field!(inp, :image_hash, image_hash)
  Thrift.set_field!(inp, :view_metadata, view_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_frontend_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function create_frontend_view

# Client callable method for delete_frontend_view
function delete_frontend_view(c::MapDClient, session::TSessionId, view_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "delete_frontend_view", Thrift.MessageType.CALL, c.seqid)
  inp = delete_frontend_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_name, view_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, delete_frontend_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function delete_frontend_view

# Client callable method for get_dashboard
function get_dashboard(c::MapDClient, session::TSessionId, dashboard_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = get_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_dashboard

# Client callable method for get_dashboards
function get_dashboards(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_dashboards", Thrift.MessageType.CALL, c.seqid)
  inp = get_dashboards_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_dashboards_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_dashboards

# Client callable method for create_dashboard
function create_dashboard(c::MapDClient, session::TSessionId, dashboard_name::String, dashboard_state::String, image_hash::String, dashboard_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = create_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_name, dashboard_name)
  Thrift.set_field!(inp, :dashboard_state, dashboard_state)
  Thrift.set_field!(inp, :image_hash, image_hash)
  Thrift.set_field!(inp, :dashboard_metadata, dashboard_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function create_dashboard

# Client callable method for replace_dashboard
function replace_dashboard(c::MapDClient, session::TSessionId, dashboard_id::Int32, dashboard_name::String, dashboard_owner::String, dashboard_state::String, image_hash::String, dashboard_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "replace_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = replace_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.set_field!(inp, :dashboard_name, dashboard_name)
  Thrift.set_field!(inp, :dashboard_owner, dashboard_owner)
  Thrift.set_field!(inp, :dashboard_state, dashboard_state)
  Thrift.set_field!(inp, :image_hash, image_hash)
  Thrift.set_field!(inp, :dashboard_metadata, dashboard_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, replace_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function replace_dashboard

# Client callable method for delete_dashboard
function delete_dashboard(c::MapDClient, session::TSessionId, dashboard_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "delete_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = delete_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, delete_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function delete_dashboard

# Client callable method for share_dashboard
function share_dashboard(c::MapDClient, session::TSessionId, dashboard_id::Int32, groups::Vector{String}, objects::Vector{String}, permissions::TDashboardPermissions)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "share_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = share_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.set_field!(inp, :groups, groups)
  Thrift.set_field!(inp, :objects, objects)
  Thrift.set_field!(inp, :permissions, permissions)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, share_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function share_dashboard

# Client callable method for unshare_dashboard
function unshare_dashboard(c::MapDClient, session::TSessionId, dashboard_id::Int32, groups::Vector{String}, objects::Vector{String}, permissions::TDashboardPermissions)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "unshare_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = unshare_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.set_field!(inp, :groups, groups)
  Thrift.set_field!(inp, :objects, objects)
  Thrift.set_field!(inp, :permissions, permissions)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, unshare_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function unshare_dashboard

# Client callable method for get_dashboard_grantees
function get_dashboard_grantees(c::MapDClient, session::TSessionId, dashboard_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_dashboard_grantees", Thrift.MessageType.CALL, c.seqid)
  inp = get_dashboard_grantees_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_dashboard_grantees_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_dashboard_grantees

# Client callable method for get_link_view
function get_link_view(c::MapDClient, session::TSessionId, link::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_link_view", Thrift.MessageType.CALL, c.seqid)
  inp = get_link_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :link, link)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_link_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_link_view

# Client callable method for create_link
function create_link(c::MapDClient, session::TSessionId, view_state::String, view_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_link", Thrift.MessageType.CALL, c.seqid)
  inp = create_link_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_state, view_state)
  Thrift.set_field!(inp, :view_metadata, view_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_link_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function create_link

# Client callable method for load_table_binary
function load_table_binary(c::MapDClient, session::TSessionId, table_name::String, rows::Vector{TRow})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table_binary", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_binary_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :rows, rows)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_binary_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table_binary

# Client callable method for load_table_binary_columnar
function load_table_binary_columnar(c::MapDClient, session::TSessionId, table_name::String, cols::Vector{TColumn})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table_binary_columnar", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_binary_columnar_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :cols, cols)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_binary_columnar_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table_binary_columnar

# Client callable method for load_table_binary_arrow
function load_table_binary_arrow(c::MapDClient, session::TSessionId, table_name::String, arrow_stream::Vector{UInt8})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table_binary_arrow", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_binary_arrow_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :arrow_stream, arrow_stream)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_binary_arrow_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table_binary_arrow

# Client callable method for load_table
function load_table(c::MapDClient, session::TSessionId, table_name::String, rows::Vector{TStringRow})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :rows, rows)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table

# Client callable method for detect_column_types
function detect_column_types(c::MapDClient, session::TSessionId, file_name::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "detect_column_types", Thrift.MessageType.CALL, c.seqid)
  inp = detect_column_types_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :file_name, file_name)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, detect_column_types_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function detect_column_types

# Client callable method for create_table
function create_table(c::MapDClient, session::TSessionId, table_name::String, row_desc::TRowDescriptor, table_type::Int32, create_params::TCreateParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_table", Thrift.MessageType.CALL, c.seqid)
  inp = create_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :row_desc, row_desc)
  Thrift.set_field!(inp, :table_type, table_type)
  Thrift.set_field!(inp, :create_params, create_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function create_table

# Client callable method for import_table
function import_table(c::MapDClient, session::TSessionId, table_name::String, file_name::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "import_table", Thrift.MessageType.CALL, c.seqid)
  inp = import_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :file_name, file_name)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, import_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function import_table

# Client callable method for import_geo_table
function import_geo_table(c::MapDClient, session::TSessionId, table_name::String, file_name::String, copy_params::TCopyParams, row_desc::TRowDescriptor)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "import_geo_table", Thrift.MessageType.CALL, c.seqid)
  inp = import_geo_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :file_name, file_name)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.set_field!(inp, :row_desc, row_desc)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, import_geo_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function import_geo_table

# Client callable method for import_table_status
function import_table_status(c::MapDClient, session::TSessionId, import_id::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "import_table_status", Thrift.MessageType.CALL, c.seqid)
  inp = import_table_status_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :import_id, import_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, import_table_status_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function import_table_status

# Client callable method for get_first_geo_file_in_archive
function get_first_geo_file_in_archive(c::MapDClient, session::TSessionId, archive_path::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_first_geo_file_in_archive", Thrift.MessageType.CALL, c.seqid)
  inp = get_first_geo_file_in_archive_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :archive_path, archive_path)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_first_geo_file_in_archive_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_first_geo_file_in_archive

# Client callable method for get_all_files_in_archive
function get_all_files_in_archive(c::MapDClient, session::TSessionId, archive_path::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_all_files_in_archive", Thrift.MessageType.CALL, c.seqid)
  inp = get_all_files_in_archive_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :archive_path, archive_path)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_all_files_in_archive_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_all_files_in_archive

# Client callable method for start_query
function start_query(c::MapDClient, session::TSessionId, query_ra::String, just_explain::Bool)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "start_query", Thrift.MessageType.CALL, c.seqid)
  inp = start_query_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query_ra, query_ra)
  Thrift.set_field!(inp, :just_explain, just_explain)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, start_query_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function start_query

# Client callable method for execute_first_step
function execute_first_step(c::MapDClient, pending_query::TPendingQuery)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "execute_first_step", Thrift.MessageType.CALL, c.seqid)
  inp = execute_first_step_args()
  Thrift.set_field!(inp, :pending_query, pending_query)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, execute_first_step_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function execute_first_step

# Client callable method for broadcast_serialized_rows
function broadcast_serialized_rows(c::MapDClient, serialized_rows::String, row_desc::TRowDescriptor, query_id::TQueryId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "broadcast_serialized_rows", Thrift.MessageType.CALL, c.seqid)
  inp = broadcast_serialized_rows_args()
  Thrift.set_field!(inp, :serialized_rows, serialized_rows)
  Thrift.set_field!(inp, :row_desc, row_desc)
  Thrift.set_field!(inp, :query_id, query_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, broadcast_serialized_rows_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function broadcast_serialized_rows

# Client callable method for start_render_query
function start_render_query(c::MapDClient, session::TSessionId, widget_id::Int64, node_idx::Int16, vega_json::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "start_render_query", Thrift.MessageType.CALL, c.seqid)
  inp = start_render_query_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :widget_id, widget_id)
  Thrift.set_field!(inp, :node_idx, node_idx)
  Thrift.set_field!(inp, :vega_json, vega_json)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, start_render_query_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function start_render_query

# Client callable method for execute_next_render_step
function execute_next_render_step(c::MapDClient, pending_render::TPendingRenderQuery, merged_data::TRenderAggDataMap)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "execute_next_render_step", Thrift.MessageType.CALL, c.seqid)
  inp = execute_next_render_step_args()
  Thrift.set_field!(inp, :pending_render, pending_render)
  Thrift.set_field!(inp, :merged_data, merged_data)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, execute_next_render_step_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function execute_next_render_step

# Client callable method for insert_data
function insert_data(c::MapDClient, session::TSessionId, insert_data::TInsertData)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "insert_data", Thrift.MessageType.CALL, c.seqid)
  inp = insert_data_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :insert_data, insert_data)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, insert_data_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function insert_data

# Client callable method for checkpoint
function checkpoint(c::MapDClient, session::TSessionId, db_id::Int32, table_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "checkpoint", Thrift.MessageType.CALL, c.seqid)
  inp = checkpoint_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :db_id, db_id)
  Thrift.set_field!(inp, :table_id, table_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, checkpoint_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function checkpoint

# Client callable method for get_table_descriptor
function get_table_descriptor(c::MapDClient, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_descriptor", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_descriptor_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_descriptor_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_descriptor

# Client callable method for get_row_descriptor
function get_row_descriptor(c::MapDClient, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_row_descriptor", Thrift.MessageType.CALL, c.seqid)
  inp = get_row_descriptor_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_row_descriptor_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_row_descriptor

# Client callable method for get_roles
function get_roles(c::MapDClient, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_roles", Thrift.MessageType.CALL, c.seqid)
  inp = get_roles_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_roles_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_roles

# Client callable method for get_db_objects_for_grantee
function get_db_objects_for_grantee(c::MapDClient, session::TSessionId, roleName::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_db_objects_for_grantee", Thrift.MessageType.CALL, c.seqid)
  inp = get_db_objects_for_grantee_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :roleName, roleName)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_db_objects_for_grantee_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_db_objects_for_grantee

# Client callable method for get_db_object_privs
function get_db_object_privs(c::MapDClient, session::TSessionId, objectName::String, _type::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_db_object_privs", Thrift.MessageType.CALL, c.seqid)
  inp = get_db_object_privs_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :objectName, objectName)
  Thrift.set_field!(inp, :_type, _type)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_db_object_privs_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_db_object_privs

# Client callable method for get_all_roles_for_user
function get_all_roles_for_user(c::MapDClient, session::TSessionId, userName::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_all_roles_for_user", Thrift.MessageType.CALL, c.seqid)
  inp = get_all_roles_for_user_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :userName, userName)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_all_roles_for_user_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_all_roles_for_user

# Client callable method for set_license_key
function set_license_key(c::MapDClient, session::TSessionId, key::String, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_license_key", Thrift.MessageType.CALL, c.seqid)
  inp = set_license_key_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :key, key)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_license_key_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function set_license_key

# Client callable method for get_license_claims
function get_license_claims(c::MapDClient, session::TSessionId, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_license_claims", Thrift.MessageType.CALL, c.seqid)
  inp = get_license_claims_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_license_claims_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_license_claims
