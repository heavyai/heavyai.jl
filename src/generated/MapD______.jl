#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING



# types encapsulating arguments and return values of method connect

mutable struct connect_args <: Thrift.TMsg
  user::String
  passwd::String
  dbname::String
  connect_args() = (o=new(); fillunset(o); o)
end # mutable struct connect_args

mutable struct connect_result
  success::TSessionId
  e::TMapDException
  connect_result() = (o=new(); fillunset(o); o)
  connect_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct connect_result
meta(t::Type{connect_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method disconnect

mutable struct disconnect_args <: Thrift.TMsg
  session::TSessionId
  disconnect_args() = (o=new(); fillunset(o); o)
end # mutable struct disconnect_args

mutable struct disconnect_result
  e::TMapDException
  disconnect_result() = (o=new(); fillunset(o); o)
end # mutable struct disconnect_result
meta(t::Type{disconnect_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_server_status

mutable struct get_server_status_args <: Thrift.TMsg
  session::TSessionId
  get_server_status_args() = (o=new(); fillunset(o); o)
end # mutable struct get_server_status_args

mutable struct get_server_status_result
  success::TServerStatus
  e::TMapDException
  get_server_status_result() = (o=new(); fillunset(o); o)
  get_server_status_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_server_status_result
meta(t::Type{get_server_status_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_status

mutable struct get_status_args <: Thrift.TMsg
  session::TSessionId
  get_status_args() = (o=new(); fillunset(o); o)
end # mutable struct get_status_args

mutable struct get_status_result
  success::Vector{TServerStatus}
  e::TMapDException
  get_status_result() = (o=new(); fillunset(o); o)
  get_status_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_status_result
meta(t::Type{get_status_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_hardware_info

mutable struct get_hardware_info_args <: Thrift.TMsg
  session::TSessionId
  get_hardware_info_args() = (o=new(); fillunset(o); o)
end # mutable struct get_hardware_info_args

mutable struct get_hardware_info_result
  success::TClusterHardwareInfo
  e::TMapDException
  get_hardware_info_result() = (o=new(); fillunset(o); o)
  get_hardware_info_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_hardware_info_result
meta(t::Type{get_hardware_info_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_tables

mutable struct get_tables_args <: Thrift.TMsg
  session::TSessionId
  get_tables_args() = (o=new(); fillunset(o); o)
end # mutable struct get_tables_args

mutable struct get_tables_result
  success::Vector{String}
  e::TMapDException
  get_tables_result() = (o=new(); fillunset(o); o)
  get_tables_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_tables_result
meta(t::Type{get_tables_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_physical_tables

mutable struct get_physical_tables_args <: Thrift.TMsg
  session::TSessionId
  get_physical_tables_args() = (o=new(); fillunset(o); o)
end # mutable struct get_physical_tables_args

mutable struct get_physical_tables_result
  success::Vector{String}
  e::TMapDException
  get_physical_tables_result() = (o=new(); fillunset(o); o)
  get_physical_tables_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_physical_tables_result
meta(t::Type{get_physical_tables_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_views

mutable struct get_views_args <: Thrift.TMsg
  session::TSessionId
  get_views_args() = (o=new(); fillunset(o); o)
end # mutable struct get_views_args

mutable struct get_views_result
  success::Vector{String}
  e::TMapDException
  get_views_result() = (o=new(); fillunset(o); o)
  get_views_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_views_result
meta(t::Type{get_views_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_tables_meta

mutable struct get_tables_meta_args <: Thrift.TMsg
  session::TSessionId
  get_tables_meta_args() = (o=new(); fillunset(o); o)
end # mutable struct get_tables_meta_args

mutable struct get_tables_meta_result
  success::Vector{TTableMeta}
  e::TMapDException
  get_tables_meta_result() = (o=new(); fillunset(o); o)
  get_tables_meta_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_tables_meta_result
meta(t::Type{get_tables_meta_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_table_details

mutable struct get_table_details_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  get_table_details_args() = (o=new(); fillunset(o); o)
end # mutable struct get_table_details_args

mutable struct get_table_details_result
  success::TTableDetails
  e::TMapDException
  get_table_details_result() = (o=new(); fillunset(o); o)
  get_table_details_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_table_details_result
meta(t::Type{get_table_details_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_internal_table_details

mutable struct get_internal_table_details_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  get_internal_table_details_args() = (o=new(); fillunset(o); o)
end # mutable struct get_internal_table_details_args

mutable struct get_internal_table_details_result
  success::TTableDetails
  e::TMapDException
  get_internal_table_details_result() = (o=new(); fillunset(o); o)
  get_internal_table_details_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_internal_table_details_result
meta(t::Type{get_internal_table_details_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_users

mutable struct get_users_args <: Thrift.TMsg
  session::TSessionId
  get_users_args() = (o=new(); fillunset(o); o)
end # mutable struct get_users_args

mutable struct get_users_result
  success::Vector{String}
  e::TMapDException
  get_users_result() = (o=new(); fillunset(o); o)
  get_users_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_users_result
meta(t::Type{get_users_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_databases

mutable struct get_databases_args <: Thrift.TMsg
  session::TSessionId
  get_databases_args() = (o=new(); fillunset(o); o)
end # mutable struct get_databases_args

mutable struct get_databases_result
  success::Vector{TDBInfo}
  e::TMapDException
  get_databases_result() = (o=new(); fillunset(o); o)
  get_databases_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_databases_result
meta(t::Type{get_databases_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_version

mutable struct get_version_args <: Thrift.TMsg
end # mutable struct get_version_args

mutable struct get_version_result
  success::String
  e::TMapDException
  get_version_result() = (o=new(); fillunset(o); o)
  get_version_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_version_result
meta(t::Type{get_version_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method start_heap_profile

mutable struct start_heap_profile_args <: Thrift.TMsg
  session::TSessionId
  start_heap_profile_args() = (o=new(); fillunset(o); o)
end # mutable struct start_heap_profile_args

mutable struct start_heap_profile_result
  e::TMapDException
  start_heap_profile_result() = (o=new(); fillunset(o); o)
end # mutable struct start_heap_profile_result
meta(t::Type{start_heap_profile_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method stop_heap_profile

mutable struct stop_heap_profile_args <: Thrift.TMsg
  session::TSessionId
  stop_heap_profile_args() = (o=new(); fillunset(o); o)
end # mutable struct stop_heap_profile_args

mutable struct stop_heap_profile_result
  e::TMapDException
  stop_heap_profile_result() = (o=new(); fillunset(o); o)
end # mutable struct stop_heap_profile_result
meta(t::Type{stop_heap_profile_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_heap_profile

mutable struct get_heap_profile_args <: Thrift.TMsg
  session::TSessionId
  get_heap_profile_args() = (o=new(); fillunset(o); o)
end # mutable struct get_heap_profile_args

mutable struct get_heap_profile_result
  success::String
  e::TMapDException
  get_heap_profile_result() = (o=new(); fillunset(o); o)
  get_heap_profile_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_heap_profile_result
meta(t::Type{get_heap_profile_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_memory

mutable struct get_memory_args <: Thrift.TMsg
  session::TSessionId
  memory_level::String
  get_memory_args() = (o=new(); fillunset(o); o)
end # mutable struct get_memory_args

mutable struct get_memory_result
  success::Vector{TNodeMemoryInfo}
  e::TMapDException
  get_memory_result() = (o=new(); fillunset(o); o)
  get_memory_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_memory_result
meta(t::Type{get_memory_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method clear_cpu_memory

mutable struct clear_cpu_memory_args <: Thrift.TMsg
  session::TSessionId
  clear_cpu_memory_args() = (o=new(); fillunset(o); o)
end # mutable struct clear_cpu_memory_args

mutable struct clear_cpu_memory_result
  e::TMapDException
  clear_cpu_memory_result() = (o=new(); fillunset(o); o)
end # mutable struct clear_cpu_memory_result
meta(t::Type{clear_cpu_memory_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method clear_gpu_memory

mutable struct clear_gpu_memory_args <: Thrift.TMsg
  session::TSessionId
  clear_gpu_memory_args() = (o=new(); fillunset(o); o)
end # mutable struct clear_gpu_memory_args

mutable struct clear_gpu_memory_result
  e::TMapDException
  clear_gpu_memory_result() = (o=new(); fillunset(o); o)
end # mutable struct clear_gpu_memory_result
meta(t::Type{clear_gpu_memory_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method set_table_epoch

mutable struct set_table_epoch_args <: Thrift.TMsg
  session::TSessionId
  db_id::Int32
  table_id::Int32
  new_epoch::Int32
  set_table_epoch_args() = (o=new(); fillunset(o); o)
end # mutable struct set_table_epoch_args

mutable struct set_table_epoch_result
  e::TMapDException
  set_table_epoch_result() = (o=new(); fillunset(o); o)
end # mutable struct set_table_epoch_result
meta(t::Type{set_table_epoch_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method set_table_epoch_by_name

mutable struct set_table_epoch_by_name_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  new_epoch::Int32
  set_table_epoch_by_name_args() = (o=new(); fillunset(o); o)
end # mutable struct set_table_epoch_by_name_args

mutable struct set_table_epoch_by_name_result
  e::TMapDException
  set_table_epoch_by_name_result() = (o=new(); fillunset(o); o)
end # mutable struct set_table_epoch_by_name_result
meta(t::Type{set_table_epoch_by_name_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_table_epoch

mutable struct get_table_epoch_args <: Thrift.TMsg
  session::TSessionId
  db_id::Int32
  table_id::Int32
  get_table_epoch_args() = (o=new(); fillunset(o); o)
end # mutable struct get_table_epoch_args

mutable struct get_table_epoch_result
  success::Int32
  get_table_epoch_result() = (o=new(); fillunset(o); o)
  get_table_epoch_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_table_epoch_result
meta(t::Type{get_table_epoch_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_table_epoch_by_name

mutable struct get_table_epoch_by_name_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  get_table_epoch_by_name_args() = (o=new(); fillunset(o); o)
end # mutable struct get_table_epoch_by_name_args

mutable struct get_table_epoch_by_name_result
  success::Int32
  get_table_epoch_by_name_result() = (o=new(); fillunset(o); o)
  get_table_epoch_by_name_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_table_epoch_by_name_result
meta(t::Type{get_table_epoch_by_name_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method sql_execute

mutable struct sql_execute_args <: Thrift.TMsg
  session::TSessionId
  query::String
  column_format::Bool
  nonce::String
  first_n::Int32
  at_most_n::Int32
  sql_execute_args() = (o=new(); fillunset(o); o)
end # mutable struct sql_execute_args
meta(t::Type{sql_execute_args}) = meta(t, Symbol[], Int[], Dict{Symbol,Any}(:first_n => Int32(-1), :at_most_n => Int32(-1)))

mutable struct sql_execute_result
  success::TQueryResult
  e::TMapDException
  sql_execute_result() = (o=new(); fillunset(o); o)
  sql_execute_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct sql_execute_result
meta(t::Type{sql_execute_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method sql_execute_df

mutable struct sql_execute_df_args <: Thrift.TMsg
  session::TSessionId
  query::String
  device_type::Int32
  device_id::Int32
  first_n::Int32
  sql_execute_df_args() = (o=new(); fillunset(o); o)
end # mutable struct sql_execute_df_args
meta(t::Type{sql_execute_df_args}) = meta(t, Symbol[], Int[], Dict{Symbol,Any}(:device_id => Int32(0), :first_n => Int32(-1)))

mutable struct sql_execute_df_result
  success::TDataFrame
  e::TMapDException
  sql_execute_df_result() = (o=new(); fillunset(o); o)
  sql_execute_df_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct sql_execute_df_result
meta(t::Type{sql_execute_df_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method sql_execute_gdf

mutable struct sql_execute_gdf_args <: Thrift.TMsg
  session::TSessionId
  query::String
  device_id::Int32
  first_n::Int32
  sql_execute_gdf_args() = (o=new(); fillunset(o); o)
end # mutable struct sql_execute_gdf_args
meta(t::Type{sql_execute_gdf_args}) = meta(t, Symbol[], Int[], Dict{Symbol,Any}(:device_id => Int32(0), :first_n => Int32(-1)))

mutable struct sql_execute_gdf_result
  success::TDataFrame
  e::TMapDException
  sql_execute_gdf_result() = (o=new(); fillunset(o); o)
  sql_execute_gdf_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct sql_execute_gdf_result
meta(t::Type{sql_execute_gdf_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method deallocate_df

mutable struct deallocate_df_args <: Thrift.TMsg
  session::TSessionId
  df::TDataFrame
  device_type::Int32
  device_id::Int32
  deallocate_df_args() = (o=new(); fillunset(o); o)
end # mutable struct deallocate_df_args
meta(t::Type{deallocate_df_args}) = meta(t, Symbol[], Int[], Dict{Symbol,Any}(:device_id => Int32(0)))

mutable struct deallocate_df_result
  e::TMapDException
  deallocate_df_result() = (o=new(); fillunset(o); o)
end # mutable struct deallocate_df_result
meta(t::Type{deallocate_df_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method interrupt

mutable struct interrupt_args <: Thrift.TMsg
  session::TSessionId
  interrupt_args() = (o=new(); fillunset(o); o)
end # mutable struct interrupt_args

mutable struct interrupt_result
  e::TMapDException
  interrupt_result() = (o=new(); fillunset(o); o)
end # mutable struct interrupt_result
meta(t::Type{interrupt_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method sql_validate

mutable struct sql_validate_args <: Thrift.TMsg
  session::TSessionId
  query::String
  sql_validate_args() = (o=new(); fillunset(o); o)
end # mutable struct sql_validate_args

mutable struct sql_validate_result
  success::TTableDescriptor
  e::TMapDException
  sql_validate_result() = (o=new(); fillunset(o); o)
  sql_validate_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct sql_validate_result
meta(t::Type{sql_validate_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_completion_hints

mutable struct get_completion_hints_args <: Thrift.TMsg
  session::TSessionId
  sql::String
  cursor::Int32
  get_completion_hints_args() = (o=new(); fillunset(o); o)
end # mutable struct get_completion_hints_args

mutable struct get_completion_hints_result
  success::Vector{TCompletionHint}
  e::TMapDException
  get_completion_hints_result() = (o=new(); fillunset(o); o)
  get_completion_hints_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_completion_hints_result
meta(t::Type{get_completion_hints_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method set_execution_mode

mutable struct set_execution_mode_args <: Thrift.TMsg
  session::TSessionId
  mode::Int32
  set_execution_mode_args() = (o=new(); fillunset(o); o)
end # mutable struct set_execution_mode_args

mutable struct set_execution_mode_result
  e::TMapDException
  set_execution_mode_result() = (o=new(); fillunset(o); o)
end # mutable struct set_execution_mode_result
meta(t::Type{set_execution_mode_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method render_vega

mutable struct render_vega_args <: Thrift.TMsg
  session::TSessionId
  widget_id::Int64
  vega_json::String
  compression_level::Int32
  nonce::String
  render_vega_args() = (o=new(); fillunset(o); o)
end # mutable struct render_vega_args

mutable struct render_vega_result
  success::TRenderResult
  e::TMapDException
  render_vega_result() = (o=new(); fillunset(o); o)
  render_vega_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct render_vega_result
meta(t::Type{render_vega_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_result_row_for_pixel

mutable struct get_result_row_for_pixel_args <: Thrift.TMsg
  session::TSessionId
  widget_id::Int64
  pixel::TPixel
  table_col_names::Dict{String,Vector{String}}
  column_format::Bool
  pixelRadius::Int32
  nonce::String
  get_result_row_for_pixel_args() = (o=new(); fillunset(o); o)
end # mutable struct get_result_row_for_pixel_args

mutable struct get_result_row_for_pixel_result
  success::TPixelTableRowResult
  e::TMapDException
  get_result_row_for_pixel_result() = (o=new(); fillunset(o); o)
  get_result_row_for_pixel_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_result_row_for_pixel_result
meta(t::Type{get_result_row_for_pixel_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_frontend_view

mutable struct get_frontend_view_args <: Thrift.TMsg
  session::TSessionId
  view_name::String
  get_frontend_view_args() = (o=new(); fillunset(o); o)
end # mutable struct get_frontend_view_args

mutable struct get_frontend_view_result
  success::TFrontendView
  e::TMapDException
  get_frontend_view_result() = (o=new(); fillunset(o); o)
  get_frontend_view_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_frontend_view_result
meta(t::Type{get_frontend_view_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_frontend_views

mutable struct get_frontend_views_args <: Thrift.TMsg
  session::TSessionId
  get_frontend_views_args() = (o=new(); fillunset(o); o)
end # mutable struct get_frontend_views_args

mutable struct get_frontend_views_result
  success::Vector{TFrontendView}
  e::TMapDException
  get_frontend_views_result() = (o=new(); fillunset(o); o)
  get_frontend_views_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_frontend_views_result
meta(t::Type{get_frontend_views_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method create_frontend_view

mutable struct create_frontend_view_args <: Thrift.TMsg
  session::TSessionId
  view_name::String
  view_state::String
  image_hash::String
  view_metadata::String
  create_frontend_view_args() = (o=new(); fillunset(o); o)
end # mutable struct create_frontend_view_args

mutable struct create_frontend_view_result
  e::TMapDException
  create_frontend_view_result() = (o=new(); fillunset(o); o)
end # mutable struct create_frontend_view_result
meta(t::Type{create_frontend_view_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method delete_frontend_view

mutable struct delete_frontend_view_args <: Thrift.TMsg
  session::TSessionId
  view_name::String
  delete_frontend_view_args() = (o=new(); fillunset(o); o)
end # mutable struct delete_frontend_view_args

mutable struct delete_frontend_view_result
  e::TMapDException
  delete_frontend_view_result() = (o=new(); fillunset(o); o)
end # mutable struct delete_frontend_view_result
meta(t::Type{delete_frontend_view_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_dashboard

mutable struct get_dashboard_args <: Thrift.TMsg
  session::TSessionId
  dashboard_id::Int32
  get_dashboard_args() = (o=new(); fillunset(o); o)
end # mutable struct get_dashboard_args

mutable struct get_dashboard_result
  success::TDashboard
  e::TMapDException
  get_dashboard_result() = (o=new(); fillunset(o); o)
  get_dashboard_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_dashboard_result
meta(t::Type{get_dashboard_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_dashboards

mutable struct get_dashboards_args <: Thrift.TMsg
  session::TSessionId
  get_dashboards_args() = (o=new(); fillunset(o); o)
end # mutable struct get_dashboards_args

mutable struct get_dashboards_result
  success::Vector{TDashboard}
  e::TMapDException
  get_dashboards_result() = (o=new(); fillunset(o); o)
  get_dashboards_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_dashboards_result
meta(t::Type{get_dashboards_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method create_dashboard

mutable struct create_dashboard_args <: Thrift.TMsg
  session::TSessionId
  dashboard_name::String
  dashboard_state::String
  image_hash::String
  dashboard_metadata::String
  create_dashboard_args() = (o=new(); fillunset(o); o)
end # mutable struct create_dashboard_args

mutable struct create_dashboard_result
  success::Int32
  e::TMapDException
  create_dashboard_result() = (o=new(); fillunset(o); o)
  create_dashboard_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct create_dashboard_result
meta(t::Type{create_dashboard_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method replace_dashboard

mutable struct replace_dashboard_args <: Thrift.TMsg
  session::TSessionId
  dashboard_id::Int32
  dashboard_name::String
  dashboard_owner::String
  dashboard_state::String
  image_hash::String
  dashboard_metadata::String
  replace_dashboard_args() = (o=new(); fillunset(o); o)
end # mutable struct replace_dashboard_args

mutable struct replace_dashboard_result
  e::TMapDException
  replace_dashboard_result() = (o=new(); fillunset(o); o)
end # mutable struct replace_dashboard_result
meta(t::Type{replace_dashboard_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method delete_dashboard

mutable struct delete_dashboard_args <: Thrift.TMsg
  session::TSessionId
  dashboard_id::Int32
  delete_dashboard_args() = (o=new(); fillunset(o); o)
end # mutable struct delete_dashboard_args

mutable struct delete_dashboard_result
  e::TMapDException
  delete_dashboard_result() = (o=new(); fillunset(o); o)
end # mutable struct delete_dashboard_result
meta(t::Type{delete_dashboard_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method share_dashboard

mutable struct share_dashboard_args <: Thrift.TMsg
  session::TSessionId
  dashboard_id::Int32
  groups::Vector{String}
  objects::Vector{String}
  permissions::TDashboardPermissions
  share_dashboard_args() = (o=new(); fillunset(o); o)
end # mutable struct share_dashboard_args

mutable struct share_dashboard_result
  e::TMapDException
  share_dashboard_result() = (o=new(); fillunset(o); o)
end # mutable struct share_dashboard_result
meta(t::Type{share_dashboard_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method unshare_dashboard

mutable struct unshare_dashboard_args <: Thrift.TMsg
  session::TSessionId
  dashboard_id::Int32
  groups::Vector{String}
  objects::Vector{String}
  permissions::TDashboardPermissions
  unshare_dashboard_args() = (o=new(); fillunset(o); o)
end # mutable struct unshare_dashboard_args

mutable struct unshare_dashboard_result
  e::TMapDException
  unshare_dashboard_result() = (o=new(); fillunset(o); o)
end # mutable struct unshare_dashboard_result
meta(t::Type{unshare_dashboard_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_dashboard_grantees

mutable struct get_dashboard_grantees_args <: Thrift.TMsg
  session::TSessionId
  dashboard_id::Int32
  get_dashboard_grantees_args() = (o=new(); fillunset(o); o)
end # mutable struct get_dashboard_grantees_args

mutable struct get_dashboard_grantees_result
  success::Vector{TDashboardGrantees}
  e::TMapDException
  get_dashboard_grantees_result() = (o=new(); fillunset(o); o)
  get_dashboard_grantees_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_dashboard_grantees_result
meta(t::Type{get_dashboard_grantees_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_link_view

mutable struct get_link_view_args <: Thrift.TMsg
  session::TSessionId
  link::String
  get_link_view_args() = (o=new(); fillunset(o); o)
end # mutable struct get_link_view_args

mutable struct get_link_view_result
  success::TFrontendView
  e::TMapDException
  get_link_view_result() = (o=new(); fillunset(o); o)
  get_link_view_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_link_view_result
meta(t::Type{get_link_view_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method create_link

mutable struct create_link_args <: Thrift.TMsg
  session::TSessionId
  view_state::String
  view_metadata::String
  create_link_args() = (o=new(); fillunset(o); o)
end # mutable struct create_link_args

mutable struct create_link_result
  success::String
  e::TMapDException
  create_link_result() = (o=new(); fillunset(o); o)
  create_link_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct create_link_result
meta(t::Type{create_link_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method load_table_binary

mutable struct load_table_binary_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  rows::Vector{TRow}
  load_table_binary_args() = (o=new(); fillunset(o); o)
end # mutable struct load_table_binary_args

mutable struct load_table_binary_result
  e::TMapDException
  load_table_binary_result() = (o=new(); fillunset(o); o)
end # mutable struct load_table_binary_result
meta(t::Type{load_table_binary_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method load_table_binary_columnar

mutable struct load_table_binary_columnar_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  cols::Vector{TColumn}
  load_table_binary_columnar_args() = (o=new(); fillunset(o); o)
end # mutable struct load_table_binary_columnar_args

mutable struct load_table_binary_columnar_result
  e::TMapDException
  load_table_binary_columnar_result() = (o=new(); fillunset(o); o)
end # mutable struct load_table_binary_columnar_result
meta(t::Type{load_table_binary_columnar_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method load_table_binary_arrow

mutable struct load_table_binary_arrow_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  arrow_stream::Vector{UInt8}
  load_table_binary_arrow_args() = (o=new(); fillunset(o); o)
end # mutable struct load_table_binary_arrow_args

mutable struct load_table_binary_arrow_result
  e::TMapDException
  load_table_binary_arrow_result() = (o=new(); fillunset(o); o)
end # mutable struct load_table_binary_arrow_result
meta(t::Type{load_table_binary_arrow_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method load_table

mutable struct load_table_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  rows::Vector{TStringRow}
  load_table_args() = (o=new(); fillunset(o); o)
end # mutable struct load_table_args

mutable struct load_table_result
  e::TMapDException
  load_table_result() = (o=new(); fillunset(o); o)
end # mutable struct load_table_result
meta(t::Type{load_table_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method detect_column_types

mutable struct detect_column_types_args <: Thrift.TMsg
  session::TSessionId
  file_name::String
  copy_params::TCopyParams
  detect_column_types_args() = (o=new(); fillunset(o); o)
end # mutable struct detect_column_types_args

mutable struct detect_column_types_result
  success::TDetectResult
  e::TMapDException
  detect_column_types_result() = (o=new(); fillunset(o); o)
  detect_column_types_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct detect_column_types_result
meta(t::Type{detect_column_types_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method create_table

mutable struct create_table_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  row_desc::TRowDescriptor
  table_type::Int32
  create_params::TCreateParams
  create_table_args() = (o=new(); fillunset(o); o)
end # mutable struct create_table_args
meta(t::Type{create_table_args}) = meta(t, Symbol[], Int[], Dict{Symbol,Any}(:table_type => Int32(0)))

mutable struct create_table_result
  e::TMapDException
  create_table_result() = (o=new(); fillunset(o); o)
end # mutable struct create_table_result
meta(t::Type{create_table_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method import_table

mutable struct import_table_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  file_name::String
  copy_params::TCopyParams
  import_table_args() = (o=new(); fillunset(o); o)
end # mutable struct import_table_args

mutable struct import_table_result
  e::TMapDException
  import_table_result() = (o=new(); fillunset(o); o)
end # mutable struct import_table_result
meta(t::Type{import_table_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method import_geo_table

mutable struct import_geo_table_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  file_name::String
  copy_params::TCopyParams
  row_desc::TRowDescriptor
  import_geo_table_args() = (o=new(); fillunset(o); o)
end # mutable struct import_geo_table_args

mutable struct import_geo_table_result
  e::TMapDException
  import_geo_table_result() = (o=new(); fillunset(o); o)
end # mutable struct import_geo_table_result
meta(t::Type{import_geo_table_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method import_table_status

mutable struct import_table_status_args <: Thrift.TMsg
  session::TSessionId
  import_id::String
  import_table_status_args() = (o=new(); fillunset(o); o)
end # mutable struct import_table_status_args

mutable struct import_table_status_result
  success::TImportStatus
  e::TMapDException
  import_table_status_result() = (o=new(); fillunset(o); o)
  import_table_status_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct import_table_status_result
meta(t::Type{import_table_status_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_first_geo_file_in_archive

mutable struct get_first_geo_file_in_archive_args <: Thrift.TMsg
  session::TSessionId
  archive_path::String
  copy_params::TCopyParams
  get_first_geo_file_in_archive_args() = (o=new(); fillunset(o); o)
end # mutable struct get_first_geo_file_in_archive_args

mutable struct get_first_geo_file_in_archive_result
  success::String
  e::TMapDException
  get_first_geo_file_in_archive_result() = (o=new(); fillunset(o); o)
  get_first_geo_file_in_archive_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_first_geo_file_in_archive_result
meta(t::Type{get_first_geo_file_in_archive_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_all_files_in_archive

mutable struct get_all_files_in_archive_args <: Thrift.TMsg
  session::TSessionId
  archive_path::String
  copy_params::TCopyParams
  get_all_files_in_archive_args() = (o=new(); fillunset(o); o)
end # mutable struct get_all_files_in_archive_args

mutable struct get_all_files_in_archive_result
  success::Vector{String}
  e::TMapDException
  get_all_files_in_archive_result() = (o=new(); fillunset(o); o)
  get_all_files_in_archive_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_all_files_in_archive_result
meta(t::Type{get_all_files_in_archive_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method start_query

mutable struct start_query_args <: Thrift.TMsg
  session::TSessionId
  query_ra::String
  just_explain::Bool
  start_query_args() = (o=new(); fillunset(o); o)
end # mutable struct start_query_args

mutable struct start_query_result
  success::TPendingQuery
  e::TMapDException
  start_query_result() = (o=new(); fillunset(o); o)
  start_query_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct start_query_result
meta(t::Type{start_query_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method execute_first_step

mutable struct execute_first_step_args <: Thrift.TMsg
  pending_query::TPendingQuery
  execute_first_step_args() = (o=new(); fillunset(o); o)
end # mutable struct execute_first_step_args

mutable struct execute_first_step_result
  success::TStepResult
  e::TMapDException
  execute_first_step_result() = (o=new(); fillunset(o); o)
  execute_first_step_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct execute_first_step_result
meta(t::Type{execute_first_step_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method broadcast_serialized_rows

mutable struct broadcast_serialized_rows_args <: Thrift.TMsg
  serialized_rows::String
  row_desc::TRowDescriptor
  query_id::TQueryId
  broadcast_serialized_rows_args() = (o=new(); fillunset(o); o)
end # mutable struct broadcast_serialized_rows_args

mutable struct broadcast_serialized_rows_result
  e::TMapDException
  broadcast_serialized_rows_result() = (o=new(); fillunset(o); o)
end # mutable struct broadcast_serialized_rows_result
meta(t::Type{broadcast_serialized_rows_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method start_render_query

mutable struct start_render_query_args <: Thrift.TMsg
  session::TSessionId
  widget_id::Int64
  node_idx::Int16
  vega_json::String
  start_render_query_args() = (o=new(); fillunset(o); o)
end # mutable struct start_render_query_args

mutable struct start_render_query_result
  success::TPendingRenderQuery
  e::TMapDException
  start_render_query_result() = (o=new(); fillunset(o); o)
  start_render_query_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct start_render_query_result
meta(t::Type{start_render_query_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method execute_next_render_step

mutable struct execute_next_render_step_args <: Thrift.TMsg
  pending_render::TPendingRenderQuery
  merged_data::TRenderAggDataMap
  execute_next_render_step_args() = (o=new(); fillunset(o); o)
end # mutable struct execute_next_render_step_args

mutable struct execute_next_render_step_result
  success::TRenderStepResult
  e::TMapDException
  execute_next_render_step_result() = (o=new(); fillunset(o); o)
  execute_next_render_step_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct execute_next_render_step_result
meta(t::Type{execute_next_render_step_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method insert_data

mutable struct insert_data_args <: Thrift.TMsg
  session::TSessionId
  insert_data::TInsertData
  insert_data_args() = (o=new(); fillunset(o); o)
end # mutable struct insert_data_args

mutable struct insert_data_result
  e::TMapDException
  insert_data_result() = (o=new(); fillunset(o); o)
end # mutable struct insert_data_result
meta(t::Type{insert_data_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method checkpoint

mutable struct checkpoint_args <: Thrift.TMsg
  session::TSessionId
  db_id::Int32
  table_id::Int32
  checkpoint_args() = (o=new(); fillunset(o); o)
end # mutable struct checkpoint_args

mutable struct checkpoint_result
  e::TMapDException
  checkpoint_result() = (o=new(); fillunset(o); o)
end # mutable struct checkpoint_result
meta(t::Type{checkpoint_result}) = meta(t, Symbol[:e], Int[1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_table_descriptor

mutable struct get_table_descriptor_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  get_table_descriptor_args() = (o=new(); fillunset(o); o)
end # mutable struct get_table_descriptor_args

mutable struct get_table_descriptor_result
  success::TTableDescriptor
  e::TMapDException
  get_table_descriptor_result() = (o=new(); fillunset(o); o)
  get_table_descriptor_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_table_descriptor_result
meta(t::Type{get_table_descriptor_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_row_descriptor

mutable struct get_row_descriptor_args <: Thrift.TMsg
  session::TSessionId
  table_name::String
  get_row_descriptor_args() = (o=new(); fillunset(o); o)
end # mutable struct get_row_descriptor_args

mutable struct get_row_descriptor_result
  success::TRowDescriptor
  e::TMapDException
  get_row_descriptor_result() = (o=new(); fillunset(o); o)
  get_row_descriptor_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_row_descriptor_result
meta(t::Type{get_row_descriptor_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_roles

mutable struct get_roles_args <: Thrift.TMsg
  session::TSessionId
  get_roles_args() = (o=new(); fillunset(o); o)
end # mutable struct get_roles_args

mutable struct get_roles_result
  success::Vector{String}
  e::TMapDException
  get_roles_result() = (o=new(); fillunset(o); o)
  get_roles_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_roles_result
meta(t::Type{get_roles_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_db_objects_for_grantee

mutable struct get_db_objects_for_grantee_args <: Thrift.TMsg
  session::TSessionId
  roleName::String
  get_db_objects_for_grantee_args() = (o=new(); fillunset(o); o)
end # mutable struct get_db_objects_for_grantee_args

mutable struct get_db_objects_for_grantee_result
  success::Vector{TDBObject}
  e::TMapDException
  get_db_objects_for_grantee_result() = (o=new(); fillunset(o); o)
  get_db_objects_for_grantee_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_db_objects_for_grantee_result
meta(t::Type{get_db_objects_for_grantee_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_db_object_privs

mutable struct get_db_object_privs_args <: Thrift.TMsg
  session::TSessionId
  objectName::String
  _type::Int32
  get_db_object_privs_args() = (o=new(); fillunset(o); o)
end # mutable struct get_db_object_privs_args

mutable struct get_db_object_privs_result
  success::Vector{TDBObject}
  e::TMapDException
  get_db_object_privs_result() = (o=new(); fillunset(o); o)
  get_db_object_privs_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_db_object_privs_result
meta(t::Type{get_db_object_privs_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_all_roles_for_user

mutable struct get_all_roles_for_user_args <: Thrift.TMsg
  session::TSessionId
  userName::String
  get_all_roles_for_user_args() = (o=new(); fillunset(o); o)
end # mutable struct get_all_roles_for_user_args

mutable struct get_all_roles_for_user_result
  success::Vector{String}
  e::TMapDException
  get_all_roles_for_user_result() = (o=new(); fillunset(o); o)
  get_all_roles_for_user_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_all_roles_for_user_result
meta(t::Type{get_all_roles_for_user_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method set_license_key

mutable struct set_license_key_args <: Thrift.TMsg
  session::TSessionId
  key::String
  nonce::String
  set_license_key_args() = (o=new(); fillunset(o); o)
end # mutable struct set_license_key_args
meta(t::Type{set_license_key_args}) = meta(t, Symbol[], Int[], Dict{Symbol,Any}(:nonce => ""))

mutable struct set_license_key_result
  success::TLicenseInfo
  e::TMapDException
  set_license_key_result() = (o=new(); fillunset(o); o)
  set_license_key_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct set_license_key_result
meta(t::Type{set_license_key_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method get_license_claims

mutable struct get_license_claims_args <: Thrift.TMsg
  session::TSessionId
  nonce::String
  get_license_claims_args() = (o=new(); fillunset(o); o)
end # mutable struct get_license_claims_args
meta(t::Type{get_license_claims_args}) = meta(t, Symbol[], Int[], Dict{Symbol,Any}(:nonce => ""))

mutable struct get_license_claims_result
  success::TLicenseInfo
  e::TMapDException
  get_license_claims_result() = (o=new(); fillunset(o); o)
  get_license_claims_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct get_license_claims_result
meta(t::Type{get_license_claims_result}) = meta(t, Symbol[:success, :e], Int[0, 1], Dict{Symbol,Any}())



# Processor for MapD service (to be used in server implementation)
mutable struct MapDProcessor <: TProcessor
  tp::ThriftProcessor
  function MapDProcessor()
    p = new(ThriftProcessor())
    handle(p.tp, ThriftHandler("connect", _connect, connect_args, connect_result))
    handle(p.tp, ThriftHandler("disconnect", _disconnect, disconnect_args, disconnect_result))
    handle(p.tp, ThriftHandler("get_server_status", _get_server_status, get_server_status_args, get_server_status_result))
    handle(p.tp, ThriftHandler("get_status", _get_status, get_status_args, get_status_result))
    handle(p.tp, ThriftHandler("get_hardware_info", _get_hardware_info, get_hardware_info_args, get_hardware_info_result))
    handle(p.tp, ThriftHandler("get_tables", _get_tables, get_tables_args, get_tables_result))
    handle(p.tp, ThriftHandler("get_physical_tables", _get_physical_tables, get_physical_tables_args, get_physical_tables_result))
    handle(p.tp, ThriftHandler("get_views", _get_views, get_views_args, get_views_result))
    handle(p.tp, ThriftHandler("get_tables_meta", _get_tables_meta, get_tables_meta_args, get_tables_meta_result))
    handle(p.tp, ThriftHandler("get_table_details", _get_table_details, get_table_details_args, get_table_details_result))
    handle(p.tp, ThriftHandler("get_internal_table_details", _get_internal_table_details, get_internal_table_details_args, get_internal_table_details_result))
    handle(p.tp, ThriftHandler("get_users", _get_users, get_users_args, get_users_result))
    handle(p.tp, ThriftHandler("get_databases", _get_databases, get_databases_args, get_databases_result))
    handle(p.tp, ThriftHandler("get_version", _get_version, get_version_args, get_version_result))
    handle(p.tp, ThriftHandler("start_heap_profile", _start_heap_profile, start_heap_profile_args, start_heap_profile_result))
    handle(p.tp, ThriftHandler("stop_heap_profile", _stop_heap_profile, stop_heap_profile_args, stop_heap_profile_result))
    handle(p.tp, ThriftHandler("get_heap_profile", _get_heap_profile, get_heap_profile_args, get_heap_profile_result))
    handle(p.tp, ThriftHandler("get_memory", _get_memory, get_memory_args, get_memory_result))
    handle(p.tp, ThriftHandler("clear_cpu_memory", _clear_cpu_memory, clear_cpu_memory_args, clear_cpu_memory_result))
    handle(p.tp, ThriftHandler("clear_gpu_memory", _clear_gpu_memory, clear_gpu_memory_args, clear_gpu_memory_result))
    handle(p.tp, ThriftHandler("set_table_epoch", _set_table_epoch, set_table_epoch_args, set_table_epoch_result))
    handle(p.tp, ThriftHandler("set_table_epoch_by_name", _set_table_epoch_by_name, set_table_epoch_by_name_args, set_table_epoch_by_name_result))
    handle(p.tp, ThriftHandler("get_table_epoch", _get_table_epoch, get_table_epoch_args, get_table_epoch_result))
    handle(p.tp, ThriftHandler("get_table_epoch_by_name", _get_table_epoch_by_name, get_table_epoch_by_name_args, get_table_epoch_by_name_result))
    handle(p.tp, ThriftHandler("sql_execute", _sql_execute, sql_execute_args, sql_execute_result))
    handle(p.tp, ThriftHandler("sql_execute_df", _sql_execute_df, sql_execute_df_args, sql_execute_df_result))
    handle(p.tp, ThriftHandler("sql_execute_gdf", _sql_execute_gdf, sql_execute_gdf_args, sql_execute_gdf_result))
    handle(p.tp, ThriftHandler("deallocate_df", _deallocate_df, deallocate_df_args, deallocate_df_result))
    handle(p.tp, ThriftHandler("interrupt", _interrupt, interrupt_args, interrupt_result))
    handle(p.tp, ThriftHandler("sql_validate", _sql_validate, sql_validate_args, sql_validate_result))
    handle(p.tp, ThriftHandler("get_completion_hints", _get_completion_hints, get_completion_hints_args, get_completion_hints_result))
    handle(p.tp, ThriftHandler("set_execution_mode", _set_execution_mode, set_execution_mode_args, set_execution_mode_result))
    handle(p.tp, ThriftHandler("render_vega", _render_vega, render_vega_args, render_vega_result))
    handle(p.tp, ThriftHandler("get_result_row_for_pixel", _get_result_row_for_pixel, get_result_row_for_pixel_args, get_result_row_for_pixel_result))
    handle(p.tp, ThriftHandler("get_frontend_view", _get_frontend_view, get_frontend_view_args, get_frontend_view_result))
    handle(p.tp, ThriftHandler("get_frontend_views", _get_frontend_views, get_frontend_views_args, get_frontend_views_result))
    handle(p.tp, ThriftHandler("create_frontend_view", _create_frontend_view, create_frontend_view_args, create_frontend_view_result))
    handle(p.tp, ThriftHandler("delete_frontend_view", _delete_frontend_view, delete_frontend_view_args, delete_frontend_view_result))
    handle(p.tp, ThriftHandler("get_dashboard", _get_dashboard, get_dashboard_args, get_dashboard_result))
    handle(p.tp, ThriftHandler("get_dashboards", _get_dashboards, get_dashboards_args, get_dashboards_result))
    handle(p.tp, ThriftHandler("create_dashboard", _create_dashboard, create_dashboard_args, create_dashboard_result))
    handle(p.tp, ThriftHandler("replace_dashboard", _replace_dashboard, replace_dashboard_args, replace_dashboard_result))
    handle(p.tp, ThriftHandler("delete_dashboard", _delete_dashboard, delete_dashboard_args, delete_dashboard_result))
    handle(p.tp, ThriftHandler("share_dashboard", _share_dashboard, share_dashboard_args, share_dashboard_result))
    handle(p.tp, ThriftHandler("unshare_dashboard", _unshare_dashboard, unshare_dashboard_args, unshare_dashboard_result))
    handle(p.tp, ThriftHandler("get_dashboard_grantees", _get_dashboard_grantees, get_dashboard_grantees_args, get_dashboard_grantees_result))
    handle(p.tp, ThriftHandler("get_link_view", _get_link_view, get_link_view_args, get_link_view_result))
    handle(p.tp, ThriftHandler("create_link", _create_link, create_link_args, create_link_result))
    handle(p.tp, ThriftHandler("load_table_binary", _load_table_binary, load_table_binary_args, load_table_binary_result))
    handle(p.tp, ThriftHandler("load_table_binary_columnar", _load_table_binary_columnar, load_table_binary_columnar_args, load_table_binary_columnar_result))
    handle(p.tp, ThriftHandler("load_table_binary_arrow", _load_table_binary_arrow, load_table_binary_arrow_args, load_table_binary_arrow_result))
    handle(p.tp, ThriftHandler("load_table", _load_table, load_table_args, load_table_result))
    handle(p.tp, ThriftHandler("detect_column_types", _detect_column_types, detect_column_types_args, detect_column_types_result))
    handle(p.tp, ThriftHandler("create_table", _create_table, create_table_args, create_table_result))
    handle(p.tp, ThriftHandler("import_table", _import_table, import_table_args, import_table_result))
    handle(p.tp, ThriftHandler("import_geo_table", _import_geo_table, import_geo_table_args, import_geo_table_result))
    handle(p.tp, ThriftHandler("import_table_status", _import_table_status, import_table_status_args, import_table_status_result))
    handle(p.tp, ThriftHandler("get_first_geo_file_in_archive", _get_first_geo_file_in_archive, get_first_geo_file_in_archive_args, get_first_geo_file_in_archive_result))
    handle(p.tp, ThriftHandler("get_all_files_in_archive", _get_all_files_in_archive, get_all_files_in_archive_args, get_all_files_in_archive_result))
    handle(p.tp, ThriftHandler("start_query", _start_query, start_query_args, start_query_result))
    handle(p.tp, ThriftHandler("execute_first_step", _execute_first_step, execute_first_step_args, execute_first_step_result))
    handle(p.tp, ThriftHandler("broadcast_serialized_rows", _broadcast_serialized_rows, broadcast_serialized_rows_args, broadcast_serialized_rows_result))
    handle(p.tp, ThriftHandler("start_render_query", _start_render_query, start_render_query_args, start_render_query_result))
    handle(p.tp, ThriftHandler("execute_next_render_step", _execute_next_render_step, execute_next_render_step_args, execute_next_render_step_result))
    handle(p.tp, ThriftHandler("insert_data", _insert_data, insert_data_args, insert_data_result))
    handle(p.tp, ThriftHandler("checkpoint", _checkpoint, checkpoint_args, checkpoint_result))
    handle(p.tp, ThriftHandler("get_table_descriptor", _get_table_descriptor, get_table_descriptor_args, get_table_descriptor_result))
    handle(p.tp, ThriftHandler("get_row_descriptor", _get_row_descriptor, get_row_descriptor_args, get_row_descriptor_result))
    handle(p.tp, ThriftHandler("get_roles", _get_roles, get_roles_args, get_roles_result))
    handle(p.tp, ThriftHandler("get_db_objects_for_grantee", _get_db_objects_for_grantee, get_db_objects_for_grantee_args, get_db_objects_for_grantee_result))
    handle(p.tp, ThriftHandler("get_db_object_privs", _get_db_object_privs, get_db_object_privs_args, get_db_object_privs_result))
    handle(p.tp, ThriftHandler("get_all_roles_for_user", _get_all_roles_for_user, get_all_roles_for_user_args, get_all_roles_for_user_result))
    handle(p.tp, ThriftHandler("set_license_key", _set_license_key, set_license_key_args, set_license_key_result))
    handle(p.tp, ThriftHandler("get_license_claims", _get_license_claims, get_license_claims_args, get_license_claims_result))
    p
  end
end # mutable struct MapDProcessor
function _connect(inp::connect_args)
  try
    result = connect(inp.user, inp.passwd, inp.dbname)
    return connect_result(result)
  catch ex
    exret = connect_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _connect
function _disconnect(inp::disconnect_args)
  try
    disconnect(inp.session)
    return disconnect_result()
  catch ex
    exret = disconnect_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _disconnect
function _get_server_status(inp::get_server_status_args)
  try
    result = get_server_status(inp.session)
    return get_server_status_result(result)
  catch ex
    exret = get_server_status_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_server_status
function _get_status(inp::get_status_args)
  try
    result = get_status(inp.session)
    return get_status_result(result)
  catch ex
    exret = get_status_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_status
function _get_hardware_info(inp::get_hardware_info_args)
  try
    result = get_hardware_info(inp.session)
    return get_hardware_info_result(result)
  catch ex
    exret = get_hardware_info_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_hardware_info
function _get_tables(inp::get_tables_args)
  try
    result = get_tables(inp.session)
    return get_tables_result(result)
  catch ex
    exret = get_tables_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_tables
function _get_physical_tables(inp::get_physical_tables_args)
  try
    result = get_physical_tables(inp.session)
    return get_physical_tables_result(result)
  catch ex
    exret = get_physical_tables_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_physical_tables
function _get_views(inp::get_views_args)
  try
    result = get_views(inp.session)
    return get_views_result(result)
  catch ex
    exret = get_views_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_views
function _get_tables_meta(inp::get_tables_meta_args)
  try
    result = get_tables_meta(inp.session)
    return get_tables_meta_result(result)
  catch ex
    exret = get_tables_meta_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_tables_meta
function _get_table_details(inp::get_table_details_args)
  try
    result = get_table_details(inp.session, inp.table_name)
    return get_table_details_result(result)
  catch ex
    exret = get_table_details_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_table_details
function _get_internal_table_details(inp::get_internal_table_details_args)
  try
    result = get_internal_table_details(inp.session, inp.table_name)
    return get_internal_table_details_result(result)
  catch ex
    exret = get_internal_table_details_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_internal_table_details
function _get_users(inp::get_users_args)
  try
    result = get_users(inp.session)
    return get_users_result(result)
  catch ex
    exret = get_users_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_users
function _get_databases(inp::get_databases_args)
  try
    result = get_databases(inp.session)
    return get_databases_result(result)
  catch ex
    exret = get_databases_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_databases
function _get_version(inp::get_version_args)
  try
    result = get_version()
    return get_version_result(result)
  catch ex
    exret = get_version_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_version
function _start_heap_profile(inp::start_heap_profile_args)
  try
    start_heap_profile(inp.session)
    return start_heap_profile_result()
  catch ex
    exret = start_heap_profile_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _start_heap_profile
function _stop_heap_profile(inp::stop_heap_profile_args)
  try
    stop_heap_profile(inp.session)
    return stop_heap_profile_result()
  catch ex
    exret = stop_heap_profile_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _stop_heap_profile
function _get_heap_profile(inp::get_heap_profile_args)
  try
    result = get_heap_profile(inp.session)
    return get_heap_profile_result(result)
  catch ex
    exret = get_heap_profile_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_heap_profile
function _get_memory(inp::get_memory_args)
  try
    result = get_memory(inp.session, inp.memory_level)
    return get_memory_result(result)
  catch ex
    exret = get_memory_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_memory
function _clear_cpu_memory(inp::clear_cpu_memory_args)
  try
    clear_cpu_memory(inp.session)
    return clear_cpu_memory_result()
  catch ex
    exret = clear_cpu_memory_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _clear_cpu_memory
function _clear_gpu_memory(inp::clear_gpu_memory_args)
  try
    clear_gpu_memory(inp.session)
    return clear_gpu_memory_result()
  catch ex
    exret = clear_gpu_memory_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _clear_gpu_memory
function _set_table_epoch(inp::set_table_epoch_args)
  try
    set_table_epoch(inp.session, inp.db_id, inp.table_id, inp.new_epoch)
    return set_table_epoch_result()
  catch ex
    exret = set_table_epoch_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _set_table_epoch
function _set_table_epoch_by_name(inp::set_table_epoch_by_name_args)
  try
    set_table_epoch_by_name(inp.session, inp.table_name, inp.new_epoch)
    return set_table_epoch_by_name_result()
  catch ex
    exret = set_table_epoch_by_name_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _set_table_epoch_by_name
_get_table_epoch(inp::get_table_epoch_args) = get_table_epoch_result(get_table_epoch(inp.session, inp.db_id, inp.table_id))
_get_table_epoch_by_name(inp::get_table_epoch_by_name_args) = get_table_epoch_by_name_result(get_table_epoch_by_name(inp.session, inp.table_name))
function _sql_execute(inp::sql_execute_args)
  try
    result = sql_execute(inp.session, inp.query, inp.column_format, inp.nonce, inp.first_n, inp.at_most_n)
    return sql_execute_result(result)
  catch ex
    exret = sql_execute_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _sql_execute
function _sql_execute_df(inp::sql_execute_df_args)
  try
    result = sql_execute_df(inp.session, inp.query, inp.device_type, inp.device_id, inp.first_n)
    return sql_execute_df_result(result)
  catch ex
    exret = sql_execute_df_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _sql_execute_df
function _sql_execute_gdf(inp::sql_execute_gdf_args)
  try
    result = sql_execute_gdf(inp.session, inp.query, inp.device_id, inp.first_n)
    return sql_execute_gdf_result(result)
  catch ex
    exret = sql_execute_gdf_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _sql_execute_gdf
function _deallocate_df(inp::deallocate_df_args)
  try
    deallocate_df(inp.session, inp.df, inp.device_type, inp.device_id)
    return deallocate_df_result()
  catch ex
    exret = deallocate_df_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _deallocate_df
function _interrupt(inp::interrupt_args)
  try
    interrupt(inp.session)
    return interrupt_result()
  catch ex
    exret = interrupt_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _interrupt
function _sql_validate(inp::sql_validate_args)
  try
    result = sql_validate(inp.session, inp.query)
    return sql_validate_result(result)
  catch ex
    exret = sql_validate_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _sql_validate
function _get_completion_hints(inp::get_completion_hints_args)
  try
    result = get_completion_hints(inp.session, inp.sql, inp.cursor)
    return get_completion_hints_result(result)
  catch ex
    exret = get_completion_hints_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_completion_hints
function _set_execution_mode(inp::set_execution_mode_args)
  try
    set_execution_mode(inp.session, inp.mode)
    return set_execution_mode_result()
  catch ex
    exret = set_execution_mode_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _set_execution_mode
function _render_vega(inp::render_vega_args)
  try
    result = render_vega(inp.session, inp.widget_id, inp.vega_json, inp.compression_level, inp.nonce)
    return render_vega_result(result)
  catch ex
    exret = render_vega_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _render_vega
function _get_result_row_for_pixel(inp::get_result_row_for_pixel_args)
  try
    result = get_result_row_for_pixel(inp.session, inp.widget_id, inp.pixel, inp.table_col_names, inp.column_format, inp.pixelRadius, inp.nonce)
    return get_result_row_for_pixel_result(result)
  catch ex
    exret = get_result_row_for_pixel_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_result_row_for_pixel
function _get_frontend_view(inp::get_frontend_view_args)
  try
    result = get_frontend_view(inp.session, inp.view_name)
    return get_frontend_view_result(result)
  catch ex
    exret = get_frontend_view_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_frontend_view
function _get_frontend_views(inp::get_frontend_views_args)
  try
    result = get_frontend_views(inp.session)
    return get_frontend_views_result(result)
  catch ex
    exret = get_frontend_views_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_frontend_views
function _create_frontend_view(inp::create_frontend_view_args)
  try
    create_frontend_view(inp.session, inp.view_name, inp.view_state, inp.image_hash, inp.view_metadata)
    return create_frontend_view_result()
  catch ex
    exret = create_frontend_view_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _create_frontend_view
function _delete_frontend_view(inp::delete_frontend_view_args)
  try
    delete_frontend_view(inp.session, inp.view_name)
    return delete_frontend_view_result()
  catch ex
    exret = delete_frontend_view_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _delete_frontend_view
function _get_dashboard(inp::get_dashboard_args)
  try
    result = get_dashboard(inp.session, inp.dashboard_id)
    return get_dashboard_result(result)
  catch ex
    exret = get_dashboard_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_dashboard
function _get_dashboards(inp::get_dashboards_args)
  try
    result = get_dashboards(inp.session)
    return get_dashboards_result(result)
  catch ex
    exret = get_dashboards_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_dashboards
function _create_dashboard(inp::create_dashboard_args)
  try
    result = create_dashboard(inp.session, inp.dashboard_name, inp.dashboard_state, inp.image_hash, inp.dashboard_metadata)
    return create_dashboard_result(result)
  catch ex
    exret = create_dashboard_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _create_dashboard
function _replace_dashboard(inp::replace_dashboard_args)
  try
    replace_dashboard(inp.session, inp.dashboard_id, inp.dashboard_name, inp.dashboard_owner, inp.dashboard_state, inp.image_hash, inp.dashboard_metadata)
    return replace_dashboard_result()
  catch ex
    exret = replace_dashboard_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _replace_dashboard
function _delete_dashboard(inp::delete_dashboard_args)
  try
    delete_dashboard(inp.session, inp.dashboard_id)
    return delete_dashboard_result()
  catch ex
    exret = delete_dashboard_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _delete_dashboard
function _share_dashboard(inp::share_dashboard_args)
  try
    share_dashboard(inp.session, inp.dashboard_id, inp.groups, inp.objects, inp.permissions)
    return share_dashboard_result()
  catch ex
    exret = share_dashboard_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _share_dashboard
function _unshare_dashboard(inp::unshare_dashboard_args)
  try
    unshare_dashboard(inp.session, inp.dashboard_id, inp.groups, inp.objects, inp.permissions)
    return unshare_dashboard_result()
  catch ex
    exret = unshare_dashboard_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _unshare_dashboard
function _get_dashboard_grantees(inp::get_dashboard_grantees_args)
  try
    result = get_dashboard_grantees(inp.session, inp.dashboard_id)
    return get_dashboard_grantees_result(result)
  catch ex
    exret = get_dashboard_grantees_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_dashboard_grantees
function _get_link_view(inp::get_link_view_args)
  try
    result = get_link_view(inp.session, inp.link)
    return get_link_view_result(result)
  catch ex
    exret = get_link_view_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_link_view
function _create_link(inp::create_link_args)
  try
    result = create_link(inp.session, inp.view_state, inp.view_metadata)
    return create_link_result(result)
  catch ex
    exret = create_link_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _create_link
function _load_table_binary(inp::load_table_binary_args)
  try
    load_table_binary(inp.session, inp.table_name, inp.rows)
    return load_table_binary_result()
  catch ex
    exret = load_table_binary_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _load_table_binary
function _load_table_binary_columnar(inp::load_table_binary_columnar_args)
  try
    load_table_binary_columnar(inp.session, inp.table_name, inp.cols)
    return load_table_binary_columnar_result()
  catch ex
    exret = load_table_binary_columnar_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _load_table_binary_columnar
function _load_table_binary_arrow(inp::load_table_binary_arrow_args)
  try
    load_table_binary_arrow(inp.session, inp.table_name, inp.arrow_stream)
    return load_table_binary_arrow_result()
  catch ex
    exret = load_table_binary_arrow_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _load_table_binary_arrow
function _load_table(inp::load_table_args)
  try
    load_table(inp.session, inp.table_name, inp.rows)
    return load_table_result()
  catch ex
    exret = load_table_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _load_table
function _detect_column_types(inp::detect_column_types_args)
  try
    result = detect_column_types(inp.session, inp.file_name, inp.copy_params)
    return detect_column_types_result(result)
  catch ex
    exret = detect_column_types_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _detect_column_types
function _create_table(inp::create_table_args)
  try
    create_table(inp.session, inp.table_name, inp.row_desc, inp.table_type, inp.create_params)
    return create_table_result()
  catch ex
    exret = create_table_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _create_table
function _import_table(inp::import_table_args)
  try
    import_table(inp.session, inp.table_name, inp.file_name, inp.copy_params)
    return import_table_result()
  catch ex
    exret = import_table_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _import_table
function _import_geo_table(inp::import_geo_table_args)
  try
    import_geo_table(inp.session, inp.table_name, inp.file_name, inp.copy_params, inp.row_desc)
    return import_geo_table_result()
  catch ex
    exret = import_geo_table_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _import_geo_table
function _import_table_status(inp::import_table_status_args)
  try
    result = import_table_status(inp.session, inp.import_id)
    return import_table_status_result(result)
  catch ex
    exret = import_table_status_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _import_table_status
function _get_first_geo_file_in_archive(inp::get_first_geo_file_in_archive_args)
  try
    result = get_first_geo_file_in_archive(inp.session, inp.archive_path, inp.copy_params)
    return get_first_geo_file_in_archive_result(result)
  catch ex
    exret = get_first_geo_file_in_archive_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_first_geo_file_in_archive
function _get_all_files_in_archive(inp::get_all_files_in_archive_args)
  try
    result = get_all_files_in_archive(inp.session, inp.archive_path, inp.copy_params)
    return get_all_files_in_archive_result(result)
  catch ex
    exret = get_all_files_in_archive_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_all_files_in_archive
function _start_query(inp::start_query_args)
  try
    result = start_query(inp.session, inp.query_ra, inp.just_explain)
    return start_query_result(result)
  catch ex
    exret = start_query_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _start_query
function _execute_first_step(inp::execute_first_step_args)
  try
    result = execute_first_step(inp.pending_query)
    return execute_first_step_result(result)
  catch ex
    exret = execute_first_step_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _execute_first_step
function _broadcast_serialized_rows(inp::broadcast_serialized_rows_args)
  try
    broadcast_serialized_rows(inp.serialized_rows, inp.row_desc, inp.query_id)
    return broadcast_serialized_rows_result()
  catch ex
    exret = broadcast_serialized_rows_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _broadcast_serialized_rows
function _start_render_query(inp::start_render_query_args)
  try
    result = start_render_query(inp.session, inp.widget_id, inp.node_idx, inp.vega_json)
    return start_render_query_result(result)
  catch ex
    exret = start_render_query_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _start_render_query
function _execute_next_render_step(inp::execute_next_render_step_args)
  try
    result = execute_next_render_step(inp.pending_render, inp.merged_data)
    return execute_next_render_step_result(result)
  catch ex
    exret = execute_next_render_step_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _execute_next_render_step
function _insert_data(inp::insert_data_args)
  try
    insert_data(inp.session, inp.insert_data)
    return insert_data_result()
  catch ex
    exret = insert_data_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _insert_data
function _checkpoint(inp::checkpoint_args)
  try
    checkpoint(inp.session, inp.db_id, inp.table_id)
    return checkpoint_result()
  catch ex
    exret = checkpoint_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _checkpoint
function _get_table_descriptor(inp::get_table_descriptor_args)
  try
    result = get_table_descriptor(inp.session, inp.table_name)
    return get_table_descriptor_result(result)
  catch ex
    exret = get_table_descriptor_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_table_descriptor
function _get_row_descriptor(inp::get_row_descriptor_args)
  try
    result = get_row_descriptor(inp.session, inp.table_name)
    return get_row_descriptor_result(result)
  catch ex
    exret = get_row_descriptor_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_row_descriptor
function _get_roles(inp::get_roles_args)
  try
    result = get_roles(inp.session)
    return get_roles_result(result)
  catch ex
    exret = get_roles_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_roles
function _get_db_objects_for_grantee(inp::get_db_objects_for_grantee_args)
  try
    result = get_db_objects_for_grantee(inp.session, inp.roleName)
    return get_db_objects_for_grantee_result(result)
  catch ex
    exret = get_db_objects_for_grantee_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_db_objects_for_grantee
function _get_db_object_privs(inp::get_db_object_privs_args)
  try
    result = get_db_object_privs(inp.session, inp.objectName, inp._type)
    return get_db_object_privs_result(result)
  catch ex
    exret = get_db_object_privs_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_db_object_privs
function _get_all_roles_for_user(inp::get_all_roles_for_user_args)
  try
    result = get_all_roles_for_user(inp.session, inp.userName)
    return get_all_roles_for_user_result(result)
  catch ex
    exret = get_all_roles_for_user_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_all_roles_for_user
function _set_license_key(inp::set_license_key_args)
  try
    result = set_license_key(inp.session, inp.key, inp.nonce)
    return set_license_key_result(result)
  catch ex
    exret = set_license_key_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _set_license_key
function _get_license_claims(inp::get_license_claims_args)
  try
    result = get_license_claims(inp.session, inp.nonce)
    return get_license_claims_result(result)
  catch ex
    exret = get_license_claims_result()
    isa(ex, TMapDException) && (set_field!(exret, :e, ex); return exret)
    rethrow()
  end # try
end #function _get_license_claims
process(p::MapDProcessor, inp::TProtocol, outp::TProtocol) = process(p.tp, inp, outp)
distribute(p::MapDProcessor) = distribute(p.tp)


# Server side methods to be defined by user:
# function connect(user::String, passwd::String, dbname::String)
#     # returns TSessionId
#     # throws e::TMapDException
# function disconnect(session::TSessionId)
#     # returns nothing
#     # throws e::TMapDException
# function get_server_status(session::TSessionId)
#     # returns TServerStatus
#     # throws e::TMapDException
# function get_status(session::TSessionId)
#     # returns Vector{TServerStatus}
#     # throws e::TMapDException
# function get_hardware_info(session::TSessionId)
#     # returns TClusterHardwareInfo
#     # throws e::TMapDException
# function get_tables(session::TSessionId)
#     # returns Vector{String}
#     # throws e::TMapDException
# function get_physical_tables(session::TSessionId)
#     # returns Vector{String}
#     # throws e::TMapDException
# function get_views(session::TSessionId)
#     # returns Vector{String}
#     # throws e::TMapDException
# function get_tables_meta(session::TSessionId)
#     # returns Vector{TTableMeta}
#     # throws e::TMapDException
# function get_table_details(session::TSessionId, table_name::String)
#     # returns TTableDetails
#     # throws e::TMapDException
# function get_internal_table_details(session::TSessionId, table_name::String)
#     # returns TTableDetails
#     # throws e::TMapDException
# function get_users(session::TSessionId)
#     # returns Vector{String}
#     # throws e::TMapDException
# function get_databases(session::TSessionId)
#     # returns Vector{TDBInfo}
#     # throws e::TMapDException
# function get_version()
#     # returns String
#     # throws e::TMapDException
# function start_heap_profile(session::TSessionId)
#     # returns nothing
#     # throws e::TMapDException
# function stop_heap_profile(session::TSessionId)
#     # returns nothing
#     # throws e::TMapDException
# function get_heap_profile(session::TSessionId)
#     # returns String
#     # throws e::TMapDException
# function get_memory(session::TSessionId, memory_level::String)
#     # returns Vector{TNodeMemoryInfo}
#     # throws e::TMapDException
# function clear_cpu_memory(session::TSessionId)
#     # returns nothing
#     # throws e::TMapDException
# function clear_gpu_memory(session::TSessionId)
#     # returns nothing
#     # throws e::TMapDException
# function set_table_epoch(session::TSessionId, db_id::Int32, table_id::Int32, new_epoch::Int32)
#     # returns nothing
#     # throws e::TMapDException
# function set_table_epoch_by_name(session::TSessionId, table_name::String, new_epoch::Int32)
#     # returns nothing
#     # throws e::TMapDException
# function get_table_epoch(session::TSessionId, db_id::Int32, table_id::Int32)
#     # returns Int32
# function get_table_epoch_by_name(session::TSessionId, table_name::String)
#     # returns Int32
# function sql_execute(session::TSessionId, query::String, column_format::Bool, nonce::String, first_n::Int32, at_most_n::Int32)
#     # returns TQueryResult
#     # throws e::TMapDException
# function sql_execute_df(session::TSessionId, query::String, device_type::Int32, device_id::Int32, first_n::Int32)
#     # returns TDataFrame
#     # throws e::TMapDException
# function sql_execute_gdf(session::TSessionId, query::String, device_id::Int32, first_n::Int32)
#     # returns TDataFrame
#     # throws e::TMapDException
# function deallocate_df(session::TSessionId, df::TDataFrame, device_type::Int32, device_id::Int32)
#     # returns nothing
#     # throws e::TMapDException
# function interrupt(session::TSessionId)
#     # returns nothing
#     # throws e::TMapDException
# function sql_validate(session::TSessionId, query::String)
#     # returns TTableDescriptor
#     # throws e::TMapDException
# function get_completion_hints(session::TSessionId, sql::String, cursor::Int32)
#     # returns Vector{TCompletionHint}
#     # throws e::TMapDException
# function set_execution_mode(session::TSessionId, mode::Int32)
#     # returns nothing
#     # throws e::TMapDException
# function render_vega(session::TSessionId, widget_id::Int64, vega_json::String, compression_level::Int32, nonce::String)
#     # returns TRenderResult
#     # throws e::TMapDException
# function get_result_row_for_pixel(session::TSessionId, widget_id::Int64, pixel::TPixel, table_col_names::Dict{String,Vector{String}}, column_format::Bool, pixelRadius::Int32, nonce::String)
#     # returns TPixelTableRowResult
#     # throws e::TMapDException
# function get_frontend_view(session::TSessionId, view_name::String)
#     # returns TFrontendView
#     # throws e::TMapDException
# function get_frontend_views(session::TSessionId)
#     # returns Vector{TFrontendView}
#     # throws e::TMapDException
# function create_frontend_view(session::TSessionId, view_name::String, view_state::String, image_hash::String, view_metadata::String)
#     # returns nothing
#     # throws e::TMapDException
# function delete_frontend_view(session::TSessionId, view_name::String)
#     # returns nothing
#     # throws e::TMapDException
# function get_dashboard(session::TSessionId, dashboard_id::Int32)
#     # returns TDashboard
#     # throws e::TMapDException
# function get_dashboards(session::TSessionId)
#     # returns Vector{TDashboard}
#     # throws e::TMapDException
# function create_dashboard(session::TSessionId, dashboard_name::String, dashboard_state::String, image_hash::String, dashboard_metadata::String)
#     # returns Int32
#     # throws e::TMapDException
# function replace_dashboard(session::TSessionId, dashboard_id::Int32, dashboard_name::String, dashboard_owner::String, dashboard_state::String, image_hash::String, dashboard_metadata::String)
#     # returns nothing
#     # throws e::TMapDException
# function delete_dashboard(session::TSessionId, dashboard_id::Int32)
#     # returns nothing
#     # throws e::TMapDException
# function share_dashboard(session::TSessionId, dashboard_id::Int32, groups::Vector{String}, objects::Vector{String}, permissions::TDashboardPermissions)
#     # returns nothing
#     # throws e::TMapDException
# function unshare_dashboard(session::TSessionId, dashboard_id::Int32, groups::Vector{String}, objects::Vector{String}, permissions::TDashboardPermissions)
#     # returns nothing
#     # throws e::TMapDException
# function get_dashboard_grantees(session::TSessionId, dashboard_id::Int32)
#     # returns Vector{TDashboardGrantees}
#     # throws e::TMapDException
# function get_link_view(session::TSessionId, link::String)
#     # returns TFrontendView
#     # throws e::TMapDException
# function create_link(session::TSessionId, view_state::String, view_metadata::String)
#     # returns String
#     # throws e::TMapDException
# function load_table_binary(session::TSessionId, table_name::String, rows::Vector{TRow})
#     # returns nothing
#     # throws e::TMapDException
# function load_table_binary_columnar(session::TSessionId, table_name::String, cols::Vector{TColumn})
#     # returns nothing
#     # throws e::TMapDException
# function load_table_binary_arrow(session::TSessionId, table_name::String, arrow_stream::Vector{UInt8})
#     # returns nothing
#     # throws e::TMapDException
# function load_table(session::TSessionId, table_name::String, rows::Vector{TStringRow})
#     # returns nothing
#     # throws e::TMapDException
# function detect_column_types(session::TSessionId, file_name::String, copy_params::TCopyParams)
#     # returns TDetectResult
#     # throws e::TMapDException
# function create_table(session::TSessionId, table_name::String, row_desc::TRowDescriptor, table_type::Int32, create_params::TCreateParams)
#     # returns nothing
#     # throws e::TMapDException
# function import_table(session::TSessionId, table_name::String, file_name::String, copy_params::TCopyParams)
#     # returns nothing
#     # throws e::TMapDException
# function import_geo_table(session::TSessionId, table_name::String, file_name::String, copy_params::TCopyParams, row_desc::TRowDescriptor)
#     # returns nothing
#     # throws e::TMapDException
# function import_table_status(session::TSessionId, import_id::String)
#     # returns TImportStatus
#     # throws e::TMapDException
# function get_first_geo_file_in_archive(session::TSessionId, archive_path::String, copy_params::TCopyParams)
#     # returns String
#     # throws e::TMapDException
# function get_all_files_in_archive(session::TSessionId, archive_path::String, copy_params::TCopyParams)
#     # returns Vector{String}
#     # throws e::TMapDException
# function start_query(session::TSessionId, query_ra::String, just_explain::Bool)
#     # returns TPendingQuery
#     # throws e::TMapDException
# function execute_first_step(pending_query::TPendingQuery)
#     # returns TStepResult
#     # throws e::TMapDException
# function broadcast_serialized_rows(serialized_rows::String, row_desc::TRowDescriptor, query_id::TQueryId)
#     # returns nothing
#     # throws e::TMapDException
# function start_render_query(session::TSessionId, widget_id::Int64, node_idx::Int16, vega_json::String)
#     # returns TPendingRenderQuery
#     # throws e::TMapDException
# function execute_next_render_step(pending_render::TPendingRenderQuery, merged_data::TRenderAggDataMap)
#     # returns TRenderStepResult
#     # throws e::TMapDException
# function insert_data(session::TSessionId, insert_data::TInsertData)
#     # returns nothing
#     # throws e::TMapDException
# function checkpoint(session::TSessionId, db_id::Int32, table_id::Int32)
#     # returns nothing
#     # throws e::TMapDException
# function get_table_descriptor(session::TSessionId, table_name::String)
#     # returns TTableDescriptor
#     # throws e::TMapDException
# function get_row_descriptor(session::TSessionId, table_name::String)
#     # returns TRowDescriptor
#     # throws e::TMapDException
# function get_roles(session::TSessionId)
#     # returns Vector{String}
#     # throws e::TMapDException
# function get_db_objects_for_grantee(session::TSessionId, roleName::String)
#     # returns Vector{TDBObject}
#     # throws e::TMapDException
# function get_db_object_privs(session::TSessionId, objectName::String, _type::Int32)
#     # returns Vector{TDBObject}
#     # throws e::TMapDException
# function get_all_roles_for_user(session::TSessionId, userName::String)
#     # returns Vector{String}
#     # throws e::TMapDException
# function set_license_key(session::TSessionId, key::String, nonce::String)
#     # returns TLicenseInfo
#     # throws e::TMapDException
# function get_license_claims(session::TSessionId, nonce::String)
#     # returns TLicenseInfo
#     # throws e::TMapDException


# Client implementation for MapD service
mutable struct MapDClient <: MapDClientBase
  p::TProtocol
  seqid::Int32
  MapDClient(p::TProtocol) = new(p, 0)
end # mutable struct MapDClient

# Client callable method for connect
function connect(c::MapDClientBase, user::String, passwd::String, dbname::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "connect", Thrift.MessageType.CALL, c.seqid)
  inp = connect_args()
  Thrift.set_field!(inp, :user, user)
  Thrift.set_field!(inp, :passwd, passwd)
  Thrift.set_field!(inp, :dbname, dbname)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, connect_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function connect

# Client callable method for disconnect
function disconnect(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "disconnect", Thrift.MessageType.CALL, c.seqid)
  inp = disconnect_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, disconnect_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function disconnect

# Client callable method for get_server_status
function get_server_status(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_server_status", Thrift.MessageType.CALL, c.seqid)
  inp = get_server_status_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_server_status_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_server_status

# Client callable method for get_status
function get_status(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_status", Thrift.MessageType.CALL, c.seqid)
  inp = get_status_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_status_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_status

# Client callable method for get_hardware_info
function get_hardware_info(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_hardware_info", Thrift.MessageType.CALL, c.seqid)
  inp = get_hardware_info_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_hardware_info_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_hardware_info

# Client callable method for get_tables
function get_tables(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_tables", Thrift.MessageType.CALL, c.seqid)
  inp = get_tables_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_tables_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_tables

# Client callable method for get_physical_tables
function get_physical_tables(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_physical_tables", Thrift.MessageType.CALL, c.seqid)
  inp = get_physical_tables_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_physical_tables_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_physical_tables

# Client callable method for get_views
function get_views(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_views", Thrift.MessageType.CALL, c.seqid)
  inp = get_views_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_views_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_views

# Client callable method for get_tables_meta
function get_tables_meta(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_tables_meta", Thrift.MessageType.CALL, c.seqid)
  inp = get_tables_meta_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_tables_meta_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_tables_meta

# Client callable method for get_table_details
function get_table_details(c::MapDClientBase, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_details", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_details_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_details_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_details

# Client callable method for get_internal_table_details
function get_internal_table_details(c::MapDClientBase, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_internal_table_details", Thrift.MessageType.CALL, c.seqid)
  inp = get_internal_table_details_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_internal_table_details_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_internal_table_details

# Client callable method for get_users
function get_users(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_users", Thrift.MessageType.CALL, c.seqid)
  inp = get_users_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_users_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_users

# Client callable method for get_databases
function get_databases(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_databases", Thrift.MessageType.CALL, c.seqid)
  inp = get_databases_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_databases_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_databases

# Client callable method for get_version
function get_version(c::MapDClientBase)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_version", Thrift.MessageType.CALL, c.seqid)
  inp = get_version_args()
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_version_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_version

# Client callable method for start_heap_profile
function start_heap_profile(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "start_heap_profile", Thrift.MessageType.CALL, c.seqid)
  inp = start_heap_profile_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, start_heap_profile_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function start_heap_profile

# Client callable method for stop_heap_profile
function stop_heap_profile(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "stop_heap_profile", Thrift.MessageType.CALL, c.seqid)
  inp = stop_heap_profile_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, stop_heap_profile_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function stop_heap_profile

# Client callable method for get_heap_profile
function get_heap_profile(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_heap_profile", Thrift.MessageType.CALL, c.seqid)
  inp = get_heap_profile_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_heap_profile_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_heap_profile

# Client callable method for get_memory
function get_memory(c::MapDClientBase, session::TSessionId, memory_level::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_memory", Thrift.MessageType.CALL, c.seqid)
  inp = get_memory_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :memory_level, memory_level)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_memory_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_memory

# Client callable method for clear_cpu_memory
function clear_cpu_memory(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "clear_cpu_memory", Thrift.MessageType.CALL, c.seqid)
  inp = clear_cpu_memory_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, clear_cpu_memory_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function clear_cpu_memory

# Client callable method for clear_gpu_memory
function clear_gpu_memory(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "clear_gpu_memory", Thrift.MessageType.CALL, c.seqid)
  inp = clear_gpu_memory_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, clear_gpu_memory_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function clear_gpu_memory

# Client callable method for set_table_epoch
function set_table_epoch(c::MapDClientBase, session::TSessionId, db_id::Int32, table_id::Int32, new_epoch::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_table_epoch", Thrift.MessageType.CALL, c.seqid)
  inp = set_table_epoch_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :db_id, db_id)
  Thrift.set_field!(inp, :table_id, table_id)
  Thrift.set_field!(inp, :new_epoch, new_epoch)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_table_epoch_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function set_table_epoch

# Client callable method for set_table_epoch_by_name
function set_table_epoch_by_name(c::MapDClientBase, session::TSessionId, table_name::String, new_epoch::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_table_epoch_by_name", Thrift.MessageType.CALL, c.seqid)
  inp = set_table_epoch_by_name_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :new_epoch, new_epoch)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_table_epoch_by_name_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function set_table_epoch_by_name

# Client callable method for get_table_epoch
function get_table_epoch(c::MapDClientBase, session::TSessionId, db_id::Int32, table_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_epoch", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_epoch_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :db_id, db_id)
  Thrift.set_field!(inp, :table_id, table_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_epoch_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_epoch

# Client callable method for get_table_epoch_by_name
function get_table_epoch_by_name(c::MapDClientBase, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_epoch_by_name", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_epoch_by_name_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_epoch_by_name_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_epoch_by_name

# Client callable method for sql_execute
function sql_execute(c::MapDClientBase, session::TSessionId, query::String, column_format::Bool, nonce::String, first_n::Int32, at_most_n::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "sql_execute", Thrift.MessageType.CALL, c.seqid)
  inp = sql_execute_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query, query)
  Thrift.set_field!(inp, :column_format, column_format)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.set_field!(inp, :first_n, first_n)
  Thrift.set_field!(inp, :at_most_n, at_most_n)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, sql_execute_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function sql_execute

# Client callable method for sql_execute_df
function sql_execute_df(c::MapDClientBase, session::TSessionId, query::String, device_type::Int32, device_id::Int32, first_n::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "sql_execute_df", Thrift.MessageType.CALL, c.seqid)
  inp = sql_execute_df_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query, query)
  Thrift.set_field!(inp, :device_type, device_type)
  Thrift.set_field!(inp, :device_id, device_id)
  Thrift.set_field!(inp, :first_n, first_n)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, sql_execute_df_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function sql_execute_df

# Client callable method for sql_execute_gdf
function sql_execute_gdf(c::MapDClientBase, session::TSessionId, query::String, device_id::Int32, first_n::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "sql_execute_gdf", Thrift.MessageType.CALL, c.seqid)
  inp = sql_execute_gdf_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query, query)
  Thrift.set_field!(inp, :device_id, device_id)
  Thrift.set_field!(inp, :first_n, first_n)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, sql_execute_gdf_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function sql_execute_gdf

# Client callable method for deallocate_df
function deallocate_df(c::MapDClientBase, session::TSessionId, df::TDataFrame, device_type::Int32, device_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "deallocate_df", Thrift.MessageType.CALL, c.seqid)
  inp = deallocate_df_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :df, df)
  Thrift.set_field!(inp, :device_type, device_type)
  Thrift.set_field!(inp, :device_id, device_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, deallocate_df_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function deallocate_df

# Client callable method for interrupt
function interrupt(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "interrupt", Thrift.MessageType.CALL, c.seqid)
  inp = interrupt_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, interrupt_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function interrupt

# Client callable method for sql_validate
function sql_validate(c::MapDClientBase, session::TSessionId, query::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "sql_validate", Thrift.MessageType.CALL, c.seqid)
  inp = sql_validate_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query, query)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, sql_validate_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function sql_validate

# Client callable method for get_completion_hints
function get_completion_hints(c::MapDClientBase, session::TSessionId, sql::String, cursor::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_completion_hints", Thrift.MessageType.CALL, c.seqid)
  inp = get_completion_hints_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :sql, sql)
  Thrift.set_field!(inp, :cursor, cursor)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_completion_hints_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_completion_hints

# Client callable method for set_execution_mode
function set_execution_mode(c::MapDClientBase, session::TSessionId, mode::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_execution_mode", Thrift.MessageType.CALL, c.seqid)
  inp = set_execution_mode_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :mode, mode)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_execution_mode_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function set_execution_mode

# Client callable method for render_vega
function render_vega(c::MapDClientBase, session::TSessionId, widget_id::Int64, vega_json::String, compression_level::Int32, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "render_vega", Thrift.MessageType.CALL, c.seqid)
  inp = render_vega_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :widget_id, widget_id)
  Thrift.set_field!(inp, :vega_json, vega_json)
  Thrift.set_field!(inp, :compression_level, compression_level)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, render_vega_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function render_vega

# Client callable method for get_result_row_for_pixel
function get_result_row_for_pixel(c::MapDClientBase, session::TSessionId, widget_id::Int64, pixel::TPixel, table_col_names::Dict{String,Vector{String}}, column_format::Bool, pixelRadius::Int32, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_result_row_for_pixel", Thrift.MessageType.CALL, c.seqid)
  inp = get_result_row_for_pixel_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :widget_id, widget_id)
  Thrift.set_field!(inp, :pixel, pixel)
  Thrift.set_field!(inp, :table_col_names, table_col_names)
  Thrift.set_field!(inp, :column_format, column_format)
  Thrift.set_field!(inp, :pixelRadius, pixelRadius)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_result_row_for_pixel_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_result_row_for_pixel

# Client callable method for get_frontend_view
function get_frontend_view(c::MapDClientBase, session::TSessionId, view_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_frontend_view", Thrift.MessageType.CALL, c.seqid)
  inp = get_frontend_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_name, view_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_frontend_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_frontend_view

# Client callable method for get_frontend_views
function get_frontend_views(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_frontend_views", Thrift.MessageType.CALL, c.seqid)
  inp = get_frontend_views_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_frontend_views_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_frontend_views

# Client callable method for create_frontend_view
function create_frontend_view(c::MapDClientBase, session::TSessionId, view_name::String, view_state::String, image_hash::String, view_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_frontend_view", Thrift.MessageType.CALL, c.seqid)
  inp = create_frontend_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_name, view_name)
  Thrift.set_field!(inp, :view_state, view_state)
  Thrift.set_field!(inp, :image_hash, image_hash)
  Thrift.set_field!(inp, :view_metadata, view_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_frontend_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function create_frontend_view

# Client callable method for delete_frontend_view
function delete_frontend_view(c::MapDClientBase, session::TSessionId, view_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "delete_frontend_view", Thrift.MessageType.CALL, c.seqid)
  inp = delete_frontend_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_name, view_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, delete_frontend_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function delete_frontend_view

# Client callable method for get_dashboard
function get_dashboard(c::MapDClientBase, session::TSessionId, dashboard_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = get_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_dashboard

# Client callable method for get_dashboards
function get_dashboards(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_dashboards", Thrift.MessageType.CALL, c.seqid)
  inp = get_dashboards_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_dashboards_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_dashboards

# Client callable method for create_dashboard
function create_dashboard(c::MapDClientBase, session::TSessionId, dashboard_name::String, dashboard_state::String, image_hash::String, dashboard_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = create_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_name, dashboard_name)
  Thrift.set_field!(inp, :dashboard_state, dashboard_state)
  Thrift.set_field!(inp, :image_hash, image_hash)
  Thrift.set_field!(inp, :dashboard_metadata, dashboard_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function create_dashboard

# Client callable method for replace_dashboard
function replace_dashboard(c::MapDClientBase, session::TSessionId, dashboard_id::Int32, dashboard_name::String, dashboard_owner::String, dashboard_state::String, image_hash::String, dashboard_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "replace_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = replace_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.set_field!(inp, :dashboard_name, dashboard_name)
  Thrift.set_field!(inp, :dashboard_owner, dashboard_owner)
  Thrift.set_field!(inp, :dashboard_state, dashboard_state)
  Thrift.set_field!(inp, :image_hash, image_hash)
  Thrift.set_field!(inp, :dashboard_metadata, dashboard_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, replace_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function replace_dashboard

# Client callable method for delete_dashboard
function delete_dashboard(c::MapDClientBase, session::TSessionId, dashboard_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "delete_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = delete_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, delete_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function delete_dashboard

# Client callable method for share_dashboard
function share_dashboard(c::MapDClientBase, session::TSessionId, dashboard_id::Int32, groups::Vector{String}, objects::Vector{String}, permissions::TDashboardPermissions)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "share_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = share_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.set_field!(inp, :groups, groups)
  Thrift.set_field!(inp, :objects, objects)
  Thrift.set_field!(inp, :permissions, permissions)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, share_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function share_dashboard

# Client callable method for unshare_dashboard
function unshare_dashboard(c::MapDClientBase, session::TSessionId, dashboard_id::Int32, groups::Vector{String}, objects::Vector{String}, permissions::TDashboardPermissions)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "unshare_dashboard", Thrift.MessageType.CALL, c.seqid)
  inp = unshare_dashboard_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.set_field!(inp, :groups, groups)
  Thrift.set_field!(inp, :objects, objects)
  Thrift.set_field!(inp, :permissions, permissions)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, unshare_dashboard_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function unshare_dashboard

# Client callable method for get_dashboard_grantees
function get_dashboard_grantees(c::MapDClientBase, session::TSessionId, dashboard_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_dashboard_grantees", Thrift.MessageType.CALL, c.seqid)
  inp = get_dashboard_grantees_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :dashboard_id, dashboard_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_dashboard_grantees_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_dashboard_grantees

# Client callable method for get_link_view
function get_link_view(c::MapDClientBase, session::TSessionId, link::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_link_view", Thrift.MessageType.CALL, c.seqid)
  inp = get_link_view_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :link, link)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_link_view_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_link_view

# Client callable method for create_link
function create_link(c::MapDClientBase, session::TSessionId, view_state::String, view_metadata::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_link", Thrift.MessageType.CALL, c.seqid)
  inp = create_link_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :view_state, view_state)
  Thrift.set_field!(inp, :view_metadata, view_metadata)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_link_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function create_link

# Client callable method for load_table_binary
function load_table_binary(c::MapDClientBase, session::TSessionId, table_name::String, rows::Vector{TRow})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table_binary", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_binary_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :rows, rows)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_binary_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table_binary

# Client callable method for load_table_binary_columnar
function load_table_binary_columnar(c::MapDClientBase, session::TSessionId, table_name::String, cols::Vector{TColumn})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table_binary_columnar", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_binary_columnar_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :cols, cols)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_binary_columnar_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table_binary_columnar

# Client callable method for load_table_binary_arrow
function load_table_binary_arrow(c::MapDClientBase, session::TSessionId, table_name::String, arrow_stream::Vector{UInt8})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table_binary_arrow", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_binary_arrow_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :arrow_stream, arrow_stream)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_binary_arrow_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table_binary_arrow

# Client callable method for load_table
function load_table(c::MapDClientBase, session::TSessionId, table_name::String, rows::Vector{TStringRow})
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "load_table", Thrift.MessageType.CALL, c.seqid)
  inp = load_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :rows, rows)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, load_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function load_table

# Client callable method for detect_column_types
function detect_column_types(c::MapDClientBase, session::TSessionId, file_name::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "detect_column_types", Thrift.MessageType.CALL, c.seqid)
  inp = detect_column_types_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :file_name, file_name)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, detect_column_types_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function detect_column_types

# Client callable method for create_table
function create_table(c::MapDClientBase, session::TSessionId, table_name::String, row_desc::TRowDescriptor, table_type::Int32, create_params::TCreateParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "create_table", Thrift.MessageType.CALL, c.seqid)
  inp = create_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :row_desc, row_desc)
  Thrift.set_field!(inp, :table_type, table_type)
  Thrift.set_field!(inp, :create_params, create_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, create_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function create_table

# Client callable method for import_table
function import_table(c::MapDClientBase, session::TSessionId, table_name::String, file_name::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "import_table", Thrift.MessageType.CALL, c.seqid)
  inp = import_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :file_name, file_name)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, import_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function import_table

# Client callable method for import_geo_table
function import_geo_table(c::MapDClientBase, session::TSessionId, table_name::String, file_name::String, copy_params::TCopyParams, row_desc::TRowDescriptor)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "import_geo_table", Thrift.MessageType.CALL, c.seqid)
  inp = import_geo_table_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.set_field!(inp, :file_name, file_name)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.set_field!(inp, :row_desc, row_desc)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, import_geo_table_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function import_geo_table

# Client callable method for import_table_status
function import_table_status(c::MapDClientBase, session::TSessionId, import_id::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "import_table_status", Thrift.MessageType.CALL, c.seqid)
  inp = import_table_status_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :import_id, import_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, import_table_status_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function import_table_status

# Client callable method for get_first_geo_file_in_archive
function get_first_geo_file_in_archive(c::MapDClientBase, session::TSessionId, archive_path::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_first_geo_file_in_archive", Thrift.MessageType.CALL, c.seqid)
  inp = get_first_geo_file_in_archive_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :archive_path, archive_path)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_first_geo_file_in_archive_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_first_geo_file_in_archive

# Client callable method for get_all_files_in_archive
function get_all_files_in_archive(c::MapDClientBase, session::TSessionId, archive_path::String, copy_params::TCopyParams)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_all_files_in_archive", Thrift.MessageType.CALL, c.seqid)
  inp = get_all_files_in_archive_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :archive_path, archive_path)
  Thrift.set_field!(inp, :copy_params, copy_params)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_all_files_in_archive_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_all_files_in_archive

# Client callable method for start_query
function start_query(c::MapDClientBase, session::TSessionId, query_ra::String, just_explain::Bool)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "start_query", Thrift.MessageType.CALL, c.seqid)
  inp = start_query_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :query_ra, query_ra)
  Thrift.set_field!(inp, :just_explain, just_explain)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, start_query_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function start_query

# Client callable method for execute_first_step
function execute_first_step(c::MapDClientBase, pending_query::TPendingQuery)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "execute_first_step", Thrift.MessageType.CALL, c.seqid)
  inp = execute_first_step_args()
  Thrift.set_field!(inp, :pending_query, pending_query)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, execute_first_step_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function execute_first_step

# Client callable method for broadcast_serialized_rows
function broadcast_serialized_rows(c::MapDClientBase, serialized_rows::String, row_desc::TRowDescriptor, query_id::TQueryId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "broadcast_serialized_rows", Thrift.MessageType.CALL, c.seqid)
  inp = broadcast_serialized_rows_args()
  Thrift.set_field!(inp, :serialized_rows, serialized_rows)
  Thrift.set_field!(inp, :row_desc, row_desc)
  Thrift.set_field!(inp, :query_id, query_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, broadcast_serialized_rows_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function broadcast_serialized_rows

# Client callable method for start_render_query
function start_render_query(c::MapDClientBase, session::TSessionId, widget_id::Int64, node_idx::Int16, vega_json::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "start_render_query", Thrift.MessageType.CALL, c.seqid)
  inp = start_render_query_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :widget_id, widget_id)
  Thrift.set_field!(inp, :node_idx, node_idx)
  Thrift.set_field!(inp, :vega_json, vega_json)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, start_render_query_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function start_render_query

# Client callable method for execute_next_render_step
function execute_next_render_step(c::MapDClientBase, pending_render::TPendingRenderQuery, merged_data::TRenderAggDataMap)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "execute_next_render_step", Thrift.MessageType.CALL, c.seqid)
  inp = execute_next_render_step_args()
  Thrift.set_field!(inp, :pending_render, pending_render)
  Thrift.set_field!(inp, :merged_data, merged_data)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, execute_next_render_step_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function execute_next_render_step

# Client callable method for insert_data
function insert_data(c::MapDClientBase, session::TSessionId, insert_data::TInsertData)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "insert_data", Thrift.MessageType.CALL, c.seqid)
  inp = insert_data_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :insert_data, insert_data)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, insert_data_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function insert_data

# Client callable method for checkpoint
function checkpoint(c::MapDClientBase, session::TSessionId, db_id::Int32, table_id::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "checkpoint", Thrift.MessageType.CALL, c.seqid)
  inp = checkpoint_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :db_id, db_id)
  Thrift.set_field!(inp, :table_id, table_id)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, checkpoint_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  nothing
end # function checkpoint

# Client callable method for get_table_descriptor
function get_table_descriptor(c::MapDClientBase, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_table_descriptor", Thrift.MessageType.CALL, c.seqid)
  inp = get_table_descriptor_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_table_descriptor_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_table_descriptor

# Client callable method for get_row_descriptor
function get_row_descriptor(c::MapDClientBase, session::TSessionId, table_name::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_row_descriptor", Thrift.MessageType.CALL, c.seqid)
  inp = get_row_descriptor_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :table_name, table_name)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_row_descriptor_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_row_descriptor

# Client callable method for get_roles
function get_roles(c::MapDClientBase, session::TSessionId)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_roles", Thrift.MessageType.CALL, c.seqid)
  inp = get_roles_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_roles_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_roles

# Client callable method for get_db_objects_for_grantee
function get_db_objects_for_grantee(c::MapDClientBase, session::TSessionId, roleName::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_db_objects_for_grantee", Thrift.MessageType.CALL, c.seqid)
  inp = get_db_objects_for_grantee_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :roleName, roleName)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_db_objects_for_grantee_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_db_objects_for_grantee

# Client callable method for get_db_object_privs
function get_db_object_privs(c::MapDClientBase, session::TSessionId, objectName::String, _type::Int32)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_db_object_privs", Thrift.MessageType.CALL, c.seqid)
  inp = get_db_object_privs_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :objectName, objectName)
  Thrift.set_field!(inp, :_type, _type)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_db_object_privs_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_db_object_privs

# Client callable method for get_all_roles_for_user
function get_all_roles_for_user(c::MapDClientBase, session::TSessionId, userName::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_all_roles_for_user", Thrift.MessageType.CALL, c.seqid)
  inp = get_all_roles_for_user_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :userName, userName)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_all_roles_for_user_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_all_roles_for_user

# Client callable method for set_license_key
function set_license_key(c::MapDClientBase, session::TSessionId, key::String, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "set_license_key", Thrift.MessageType.CALL, c.seqid)
  inp = set_license_key_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :key, key)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, set_license_key_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function set_license_key

# Client callable method for get_license_claims
function get_license_claims(c::MapDClientBase, session::TSessionId, nonce::String)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "get_license_claims", Thrift.MessageType.CALL, c.seqid)
  inp = get_license_claims_args()
  Thrift.set_field!(inp, :session, session)
  Thrift.set_field!(inp, :nonce, nonce)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)

  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, get_license_claims_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :e) && throw(Thrift.get_field(outp, :e))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function get_license_claims
