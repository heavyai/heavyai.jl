#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

struct _enum_TResultSetLayout
  GroupByPerfectHash::Int32
  GroupByBaselineHash::Int32
  Projection::Int32
  NonGroupedAggregate::Int32
end
const TResultSetLayout = _enum_TResultSetLayout(Int32(0), Int32(1), Int32(2), Int32(3))

struct _enum_TCountDistinctImplType
  Invalid::Int32
  Bitmap::Int32
  StdSet::Int32
end
const TCountDistinctImplType = _enum_TCountDistinctImplType(Int32(0), Int32(1), Int32(2))

struct _enum_TAggKind
  AVG::Int32
  MIN::Int32
  MAX::Int32
  SUM::Int32
  COUNT::Int32
  APPROX_COUNT_DISTINCT::Int32
  SAMPLE::Int32
end
const TAggKind = _enum_TAggKind(Int32(0), Int32(1), Int32(2), Int32(3), Int32(4), Int32(5), Int32(6))



mutable struct TSlotSize <: Thrift.TMsg
  padded::Int16
  logical::Int16
  TSlotSize() = (o=new(); fillunset(o); o)
end # mutable struct TSlotSize

mutable struct TColSlotContext <: Thrift.TMsg
  slot_sizes::Vector{TSlotSize}
  col_to_slot_map::Vector{Vector{Int32}}
  TColSlotContext() = (o=new(); fillunset(o); o)
end # mutable struct TColSlotContext

mutable struct TCountDistinctDescriptor <: Thrift.TMsg
  impl_type::Int32
  min_val::Int64
  bitmap_sz_bits::Int64
  approximate::Bool
  device_type::Int32
  sub_bitmap_count::Int64
  TCountDistinctDescriptor() = (o=new(); fillunset(o); o)
end # mutable struct TCountDistinctDescriptor

const TCountDistinctDescriptors = Vector{TCountDistinctDescriptor}  #moved this to end to be after TCountDistinctDescriptor

mutable struct TResultSetBufferDescriptor <: Thrift.TMsg
  layout::Int32
  keyless::Bool
  entry_count::Int32
  idx_target_as_key::Int32
  min_val::Int64
  max_val::Int64
  bucket::Int64
  group_col_widths::Vector{Int16}
  key_bytewidth::Int16
  col_slot_context::TColSlotContext
  target_groupby_indices::Vector{Int32}
  count_distinct_descriptors::TCountDistinctDescriptors
  force_4byte_float::Bool
  TResultSetBufferDescriptor() = (o=new(); fillunset(o); o)
end # mutable struct TResultSetBufferDescriptor

mutable struct TTargetInfo <: Thrift.TMsg
  is_agg::Bool
  kind::Int32
  _type::TTypeInfo
  arg_type::TTypeInfo
  skip_nulls::Bool
  is_distinct::Bool
  TTargetInfo() = (o=new(); fillunset(o); o)
end # mutable struct TTargetInfo

mutable struct TCountDistinctSetStorage <: Thrift.TMsg
  bitmap::Vector{UInt8}
  sparse_set::Set{Int64}
  TCountDistinctSetStorage() = (o=new(); fillunset(o); o)
end # mutable struct TCountDistinctSetStorage
meta(t::Type{TCountDistinctSetStorage}) = meta(t, Symbol[:bitmap,:sparse_set], Int[], Dict{Symbol,Any}())

mutable struct TCountDistinctSet <: Thrift.TMsg
  _type::Int32
  storage::TCountDistinctSetStorage
  remote_ptr::Int64
  TCountDistinctSet() = (o=new(); fillunset(o); o)
end # mutable struct TCountDistinctSet

mutable struct TSerializedRows <: Thrift.TMsg
  buffers::Vector{Vector{UInt8}}
  buffer_lengths::Vector{Int64}
  buffers_total_size::Int64
  total_compression_time_ms::Int32
  descriptor::TResultSetBufferDescriptor
  targets::Vector{TTargetInfo}
  target_init_vals::Vector{Int64}
  varlen_buffer::Vector{Vector{UInt8}}
  count_distinct_sets::Vector{TCountDistinctSet}
  explanation::String
  TSerializedRows() = (o=new(); fillunset(o); o)
end # mutable struct TSerializedRows
